{"id":"b477e6dd7e784e4bb9f69819971306db","_format":"hh-sol-build-info-1","solcVersion":"0.8.18","solcLongVersion":"0.8.18+commit.87f61d96","input":{"language":"Solidity","sources":{"@pythnetwork/pyth-sdk-solidity/IPyth.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\nimport \"./PythStructs.sol\";\nimport \"./IPythEvents.sol\";\n\n/// @title Consume prices from the Pyth Network (https://pyth.network/).\n/// @dev Please refer to the guidance at https://docs.pyth.network/consumers/best-practices for how to consume prices safely.\n/// @author Pyth Data Association\ninterface IPyth is IPythEvents {\n    /// @notice Returns the period (in seconds) that a price feed is considered valid since its publish time\n    function getValidTimePeriod() external view returns (uint validTimePeriod);\n\n    /// @notice Returns the price and confidence interval.\n    /// @dev Reverts if the price has not been updated within the last `getValidTimePeriod()` seconds.\n    /// @param id The Pyth Price Feed ID of which to fetch the price and confidence interval.\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\n    function getPrice(\n        bytes32 id\n    ) external view returns (PythStructs.Price memory price);\n\n    /// @notice Returns the exponentially-weighted moving average price and confidence interval.\n    /// @dev Reverts if the EMA price is not available.\n    /// @param id The Pyth Price Feed ID of which to fetch the EMA price and confidence interval.\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\n    function getEmaPrice(\n        bytes32 id\n    ) external view returns (PythStructs.Price memory price);\n\n    /// @notice Returns the price of a price feed without any sanity checks.\n    /// @dev This function returns the most recent price update in this contract without any recency checks.\n    /// This function is unsafe as the returned price update may be arbitrarily far in the past.\n    ///\n    /// Users of this function should check the `publishTime` in the price to ensure that the returned price is\n    /// sufficiently recent for their application. If you are considering using this function, it may be\n    /// safer / easier to use either `getPrice` or `getPriceNoOlderThan`.\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\n    function getPriceUnsafe(\n        bytes32 id\n    ) external view returns (PythStructs.Price memory price);\n\n    /// @notice Returns the price that is no older than `age` seconds of the current time.\n    /// @dev This function is a sanity-checked version of `getPriceUnsafe` which is useful in\n    /// applications that require a sufficiently-recent price. Reverts if the price wasn't updated sufficiently\n    /// recently.\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\n    function getPriceNoOlderThan(\n        bytes32 id,\n        uint age\n    ) external view returns (PythStructs.Price memory price);\n\n    /// @notice Returns the exponentially-weighted moving average price of a price feed without any sanity checks.\n    /// @dev This function returns the same price as `getEmaPrice` in the case where the price is available.\n    /// However, if the price is not recent this function returns the latest available price.\n    ///\n    /// The returned price can be from arbitrarily far in the past; this function makes no guarantees that\n    /// the returned price is recent or useful for any particular application.\n    ///\n    /// Users of this function should check the `publishTime` in the price to ensure that the returned price is\n    /// sufficiently recent for their application. If you are considering using this function, it may be\n    /// safer / easier to use either `getEmaPrice` or `getEmaPriceNoOlderThan`.\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\n    function getEmaPriceUnsafe(\n        bytes32 id\n    ) external view returns (PythStructs.Price memory price);\n\n    /// @notice Returns the exponentially-weighted moving average price that is no older than `age` seconds\n    /// of the current time.\n    /// @dev This function is a sanity-checked version of `getEmaPriceUnsafe` which is useful in\n    /// applications that require a sufficiently-recent price. Reverts if the price wasn't updated sufficiently\n    /// recently.\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\n    function getEmaPriceNoOlderThan(\n        bytes32 id,\n        uint age\n    ) external view returns (PythStructs.Price memory price);\n\n    /// @notice Update price feeds with given update messages.\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\n    /// `getUpdateFee` with the length of the `updateData` array.\n    /// Prices will be updated if they are more recent than the current stored prices.\n    /// The call will succeed even if the update is not the most recent.\n    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid.\n    /// @param updateData Array of price update data.\n    function updatePriceFeeds(bytes[] calldata updateData) external payable;\n\n    /// @notice Wrapper around updatePriceFeeds that rejects fast if a price update is not necessary. A price update is\n    /// necessary if the current on-chain publishTime is older than the given publishTime. It relies solely on the\n    /// given `publishTimes` for the price feeds and does not read the actual price update publish time within `updateData`.\n    ///\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\n    /// `getUpdateFee` with the length of the `updateData` array.\n    ///\n    /// `priceIds` and `publishTimes` are two arrays with the same size that correspond to senders known publishTime\n    /// of each priceId when calling this method. If all of price feeds within `priceIds` have updated and have\n    /// a newer or equal publish time than the given publish time, it will reject the transaction to save gas.\n    /// Otherwise, it calls updatePriceFeeds method to update the prices.\n    ///\n    /// @dev Reverts if update is not needed or the transferred fee is not sufficient or the updateData is invalid.\n    /// @param updateData Array of price update data.\n    /// @param priceIds Array of price ids.\n    /// @param publishTimes Array of publishTimes. `publishTimes[i]` corresponds to known `publishTime` of `priceIds[i]`\n    function updatePriceFeedsIfNecessary(\n        bytes[] calldata updateData,\n        bytes32[] calldata priceIds,\n        uint64[] calldata publishTimes\n    ) external payable;\n\n    /// @notice Returns the required fee to update an array of price updates.\n    /// @param updateData Array of price update data.\n    /// @return feeAmount The required fee in Wei.\n    function getUpdateFee(\n        bytes[] calldata updateData\n    ) external view returns (uint feeAmount);\n\n    /// @notice Parse `updateData` and return price feeds of the given `priceIds` if they are all published\n    /// within `minPublishTime` and `maxPublishTime`.\n    ///\n    /// You can use this method if you want to use a Pyth price at a fixed time and not the most recent price;\n    /// otherwise, please consider using `updatePriceFeeds`. This method does not store the price updates on-chain.\n    ///\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\n    /// `getUpdateFee` with the length of the `updateData` array.\n    ///\n    ///\n    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid or there is\n    /// no update for any of the given `priceIds` within the given time range.\n    /// @param updateData Array of price update data.\n    /// @param priceIds Array of price ids.\n    /// @param minPublishTime minimum acceptable publishTime for the given `priceIds`.\n    /// @param maxPublishTime maximum acceptable publishTime for the given `priceIds`.\n    /// @return priceFeeds Array of the price feeds corresponding to the given `priceIds` (with the same order).\n    function parsePriceFeedUpdates(\n        bytes[] calldata updateData,\n        bytes32[] calldata priceIds,\n        uint64 minPublishTime,\n        uint64 maxPublishTime\n    ) external payable returns (PythStructs.PriceFeed[] memory priceFeeds);\n}\n"},"@pythnetwork/pyth-sdk-solidity/IPythEvents.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\n/// @title IPythEvents contains the events that Pyth contract emits.\n/// @dev This interface can be used for listening to the updates for off-chain and testing purposes.\ninterface IPythEvents {\n    /// @dev Emitted when the price feed with `id` has received a fresh update.\n    /// @param id The Pyth Price Feed ID.\n    /// @param publishTime Publish time of the given price update.\n    /// @param price Price of the given price update.\n    /// @param conf Confidence interval of the given price update.\n    event PriceFeedUpdate(\n        bytes32 indexed id,\n        uint64 publishTime,\n        int64 price,\n        uint64 conf\n    );\n\n    /// @dev Emitted when a batch price update is processed successfully.\n    /// @param chainId ID of the source chain that the batch price update comes from.\n    /// @param sequenceNumber Sequence number of the batch price update.\n    event BatchPriceFeedUpdate(uint16 chainId, uint64 sequenceNumber);\n}\n"},"@pythnetwork/pyth-sdk-solidity/PythStructs.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\ncontract PythStructs {\n    // A price with a degree of uncertainty, represented as a price +- a confidence interval.\n    //\n    // The confidence interval roughly corresponds to the standard error of a normal distribution.\n    // Both the price and confidence are stored in a fixed-point numeric representation,\n    // `x * (10^expo)`, where `expo` is the exponent.\n    //\n    // Please refer to the documentation at https://docs.pyth.network/consumers/best-practices for how\n    // to how this price safely.\n    struct Price {\n        // Price\n        int64 price;\n        // Confidence interval around the price\n        uint64 conf;\n        // Price exponent\n        int32 expo;\n        // Unix timestamp describing when the price was published\n        uint publishTime;\n    }\n\n    // PriceFeed represents a current aggregate price from pyth publisher feeds.\n    struct PriceFeed {\n        // The price ID.\n        bytes32 id;\n        // Latest available price\n        Price price;\n        // Latest available exponentially-weighted moving average price\n        Price emaPrice;\n    }\n}\n"},"contracts/compound/EIP20Interface.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.16;\n\n/**\n * @title ERC 20 Token Standard Interface\n *  https://eips.ethereum.org/EIPS/eip-20\n */\ninterface EIP20Interface {\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n\n    /**\n      * @notice Get the total number of tokens in circulation\n      * @return The supply of tokens\n      */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @notice Gets the balance of the specified address\n     * @param owner The address from which the balance will be retrieved\n     * @return balance The balance\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n      * @notice Transfer `amount` tokens from `msg.sender` to `dst`\n      * @param dst The address of the destination account\n      * @param amount The number of tokens to transfer\n      * @return success Whether or not the transfer succeeded\n      */\n    function transfer(address dst, uint256 amount) external returns (bool success);\n\n    /**\n      * @notice Transfer `amount` tokens from `src` to `dst`\n      * @param src The address of the source account\n      * @param dst The address of the destination account\n      * @param amount The number of tokens to transfer\n      * @return success Whether or not the transfer succeeded\n      */\n    function transferFrom(address src, address dst, uint256 amount) external returns (bool success);\n\n    /**\n      * @notice Approve `spender` to transfer up to `amount` from `src`\n      * @dev This will overwrite the approval amount for `spender`\n      *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\n      * @param spender The address of the account which may transfer tokens\n      * @param amount The number of tokens that are approved (-1 means infinite)\n      * @return success Whether or not the approval succeeded\n      */\n    function approve(address spender, uint256 amount) external returns (bool success);\n\n    /**\n      * @notice Get the current allowance from `owner` for `spender`\n      * @param owner The address of the account which owns the tokens to be spent\n      * @param spender The address of the account which may transfer tokens\n      * @return remaining The number of tokens allowed to be spent (-1 means infinite)\n      */\n    function allowance(address owner, address spender) external view returns (uint256 remaining);\n\n    event Transfer(address indexed from, address indexed to, uint256 amount);\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\n}\n"},"contracts/oracle/PythAdaptor.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.16;\n\nimport \"../compound/EIP20Interface.sol\";\nimport \"../Ownable.sol\";\nimport \"@pythnetwork/pyth-sdk-solidity/IPyth.sol\";\n\ninterface cTokenInterface {\n    function underlying() external view returns (address);\n}\n\ncontract PythAdaptor is Ownable {\n    IPyth public pythMain;\n\n    mapping(address => bytes32) public tokenFeeds;\n\n    constructor(address _pythMain) {\n        pythMain = IPyth(_pythMain);\n    }\n\n    function setTokenFeeds(address[] calldata tokens, bytes32[] calldata feeds) external onlyOwner {\n        require(tokens.length == feeds.length, \"Length mismatch\");\n        for (uint i = 0; i < tokens.length; i++) {\n            tokenFeeds[tokens[i]] = feeds[i];\n        }\n    }\n\n    // Comptroller needs prices in the format: ${raw price} * 1e36 / baseUnit\n    // The baseUnit of an asset is the amount of the smallest denomination of that asset per whole.\n    // For example, the baseUnit of ETH is 1e18.\n    // Since the prices in this view have 6 decimals, we must scale them by 1e(36 - 6)/baseUnit\n    function getUnderlyingPrice(address cToken) external view returns (uint) {\n        address underlyingToken = cTokenInterface(cToken).underlying();\n        bytes32 tokenFeed = tokenFeeds[underlyingToken];\n        PythStructs.Price memory tokenPrice = pythMain.getPriceUnsafe(tokenFeed);\n        uint32 priceExpo = tokenPrice.expo > 0 ? uint32(tokenPrice.expo) : uint32(-tokenPrice.expo);\n        uint64 tPrice = tokenPrice.price > 0 ? uint64(tokenPrice.price) : 0;\n        return uint(tPrice) * 1e36 / uint(10 ** priceExpo) / 10 ** (uint(EIP20Interface(underlyingToken).decimals()));\n    }\n}"},"contracts/Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.16;\n\nabstract contract Ownable {\n    address private _owner;\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    constructor () {\n        _owner = msg.sender;\n\n        emit OwnershipTransferred(address(0), msg.sender);\n    }\n\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    modifier onlyOwner() {\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}"}},"settings":{"optimizer":{"enabled":true,"mode":"3"},"outputSelection":{"*":{"*":["abi","evm.methodIdentifiers","metadata"],"":["ast"]}}}},"output":{"errors":[],"version":"0.8.18","long_version":"0.8.18+commit.87f61d96.Darwin.appleclang","zk_version":"1.3.10","sources":{"@pythnetwork/pyth-sdk-solidity/IPyth.sol":{"id":0,"ast":{"absolutePath":"@pythnetwork/pyth-sdk-solidity/IPyth.sol","exportedSymbols":{"IPyth":[118],"IPythEvents":[140],"PythStructs":[161]},"id":119,"license":"Apache-2.0","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"39:23:0"},{"absolutePath":"@pythnetwork/pyth-sdk-solidity/PythStructs.sol","file":"./PythStructs.sol","id":2,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":119,"sourceUnit":162,"src":"64:27:0","symbolAliases":[],"unitAlias":""},{"absolutePath":"@pythnetwork/pyth-sdk-solidity/IPythEvents.sol","file":"./IPythEvents.sol","id":3,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":119,"sourceUnit":141,"src":"92:27:0","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":5,"name":"IPythEvents","nameLocations":["373:11:0"],"nodeType":"IdentifierPath","referencedDeclaration":140,"src":"373:11:0"},"id":6,"nodeType":"InheritanceSpecifier","src":"373:11:0"}],"canonicalName":"IPyth","contractDependencies":[],"contractKind":"interface","documentation":{"id":4,"nodeType":"StructuredDocumentation","src":"121:233:0","text":"@title Consume prices from the Pyth Network (https://pyth.network/).\n @dev Please refer to the guidance at https://docs.pyth.network/consumers/best-practices for how to consume prices safely.\n @author Pyth Data Association"},"fullyImplemented":false,"id":118,"linearizedBaseContracts":[118,140],"name":"IPyth","nameLocation":"364:5:0","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":7,"nodeType":"StructuredDocumentation","src":"391:104:0","text":"@notice Returns the period (in seconds) that a price feed is considered valid since its publish time"},"functionSelector":"e18910a3","id":12,"implemented":false,"kind":"function","modifiers":[],"name":"getValidTimePeriod","nameLocation":"509:18:0","nodeType":"FunctionDefinition","parameters":{"id":8,"nodeType":"ParameterList","parameters":[],"src":"527:2:0"},"returnParameters":{"id":11,"nodeType":"ParameterList","parameters":[{"constant":false,"id":10,"mutability":"mutable","name":"validTimePeriod","nameLocation":"558:15:0","nodeType":"VariableDeclaration","scope":12,"src":"553:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":9,"name":"uint","nodeType":"ElementaryTypeName","src":"553:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"552:22:0"},"scope":118,"src":"500:75:0","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":13,"nodeType":"StructuredDocumentation","src":"581:364:0","text":"@notice Returns the price and confidence interval.\n @dev Reverts if the price has not been updated within the last `getValidTimePeriod()` seconds.\n @param id The Pyth Price Feed ID of which to fetch the price and confidence interval.\n @return price - please read the documentation of PythStructs.Price to understand how to use this safely."},"functionSelector":"31d98b3f","id":21,"implemented":false,"kind":"function","modifiers":[],"name":"getPrice","nameLocation":"959:8:0","nodeType":"FunctionDefinition","parameters":{"id":16,"nodeType":"ParameterList","parameters":[{"constant":false,"id":15,"mutability":"mutable","name":"id","nameLocation":"985:2:0","nodeType":"VariableDeclaration","scope":21,"src":"977:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":14,"name":"bytes32","nodeType":"ElementaryTypeName","src":"977:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"967:26:0"},"returnParameters":{"id":20,"nodeType":"ParameterList","parameters":[{"constant":false,"id":19,"mutability":"mutable","name":"price","nameLocation":"1042:5:0","nodeType":"VariableDeclaration","scope":21,"src":"1017:30:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Price_$151_memory_ptr","typeString":"struct PythStructs.Price"},"typeName":{"id":18,"nodeType":"UserDefinedTypeName","pathNode":{"id":17,"name":"PythStructs.Price","nameLocations":["1017:11:0","1029:5:0"],"nodeType":"IdentifierPath","referencedDeclaration":151,"src":"1017:17:0"},"referencedDeclaration":151,"src":"1017:17:0","typeDescriptions":{"typeIdentifier":"t_struct$_Price_$151_storage_ptr","typeString":"struct PythStructs.Price"}},"visibility":"internal"}],"src":"1016:32:0"},"scope":118,"src":"950:99:0","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":22,"nodeType":"StructuredDocumentation","src":"1055:359:0","text":"@notice Returns the exponentially-weighted moving average price and confidence interval.\n @dev Reverts if the EMA price is not available.\n @param id The Pyth Price Feed ID of which to fetch the EMA price and confidence interval.\n @return price - please read the documentation of PythStructs.Price to understand how to use this safely."},"functionSelector":"b5dcc911","id":30,"implemented":false,"kind":"function","modifiers":[],"name":"getEmaPrice","nameLocation":"1428:11:0","nodeType":"FunctionDefinition","parameters":{"id":25,"nodeType":"ParameterList","parameters":[{"constant":false,"id":24,"mutability":"mutable","name":"id","nameLocation":"1457:2:0","nodeType":"VariableDeclaration","scope":30,"src":"1449:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":23,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1449:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1439:26:0"},"returnParameters":{"id":29,"nodeType":"ParameterList","parameters":[{"constant":false,"id":28,"mutability":"mutable","name":"price","nameLocation":"1514:5:0","nodeType":"VariableDeclaration","scope":30,"src":"1489:30:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Price_$151_memory_ptr","typeString":"struct PythStructs.Price"},"typeName":{"id":27,"nodeType":"UserDefinedTypeName","pathNode":{"id":26,"name":"PythStructs.Price","nameLocations":["1489:11:0","1501:5:0"],"nodeType":"IdentifierPath","referencedDeclaration":151,"src":"1489:17:0"},"referencedDeclaration":151,"src":"1489:17:0","typeDescriptions":{"typeIdentifier":"t_struct$_Price_$151_storage_ptr","typeString":"struct PythStructs.Price"}},"visibility":"internal"}],"src":"1488:32:0"},"scope":118,"src":"1419:102:0","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":31,"nodeType":"StructuredDocumentation","src":"1527:690:0","text":"@notice Returns the price of a price feed without any sanity checks.\n @dev This function returns the most recent price update in this contract without any recency checks.\n This function is unsafe as the returned price update may be arbitrarily far in the past.\n Users of this function should check the `publishTime` in the price to ensure that the returned price is\n sufficiently recent for their application. If you are considering using this function, it may be\n safer / easier to use either `getPrice` or `getPriceNoOlderThan`.\n @return price - please read the documentation of PythStructs.Price to understand how to use this safely."},"functionSelector":"96834ad3","id":39,"implemented":false,"kind":"function","modifiers":[],"name":"getPriceUnsafe","nameLocation":"2231:14:0","nodeType":"FunctionDefinition","parameters":{"id":34,"nodeType":"ParameterList","parameters":[{"constant":false,"id":33,"mutability":"mutable","name":"id","nameLocation":"2263:2:0","nodeType":"VariableDeclaration","scope":39,"src":"2255:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":32,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2255:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2245:26:0"},"returnParameters":{"id":38,"nodeType":"ParameterList","parameters":[{"constant":false,"id":37,"mutability":"mutable","name":"price","nameLocation":"2320:5:0","nodeType":"VariableDeclaration","scope":39,"src":"2295:30:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Price_$151_memory_ptr","typeString":"struct PythStructs.Price"},"typeName":{"id":36,"nodeType":"UserDefinedTypeName","pathNode":{"id":35,"name":"PythStructs.Price","nameLocations":["2295:11:0","2307:5:0"],"nodeType":"IdentifierPath","referencedDeclaration":151,"src":"2295:17:0"},"referencedDeclaration":151,"src":"2295:17:0","typeDescriptions":{"typeIdentifier":"t_struct$_Price_$151_storage_ptr","typeString":"struct PythStructs.Price"}},"visibility":"internal"}],"src":"2294:32:0"},"scope":118,"src":"2222:105:0","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":40,"nodeType":"StructuredDocumentation","src":"2333:423:0","text":"@notice Returns the price that is no older than `age` seconds of the current time.\n @dev This function is a sanity-checked version of `getPriceUnsafe` which is useful in\n applications that require a sufficiently-recent price. Reverts if the price wasn't updated sufficiently\n recently.\n @return price - please read the documentation of PythStructs.Price to understand how to use this safely."},"functionSelector":"a4ae35e0","id":50,"implemented":false,"kind":"function","modifiers":[],"name":"getPriceNoOlderThan","nameLocation":"2770:19:0","nodeType":"FunctionDefinition","parameters":{"id":45,"nodeType":"ParameterList","parameters":[{"constant":false,"id":42,"mutability":"mutable","name":"id","nameLocation":"2807:2:0","nodeType":"VariableDeclaration","scope":50,"src":"2799:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":41,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2799:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":44,"mutability":"mutable","name":"age","nameLocation":"2824:3:0","nodeType":"VariableDeclaration","scope":50,"src":"2819:8:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":43,"name":"uint","nodeType":"ElementaryTypeName","src":"2819:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2789:44:0"},"returnParameters":{"id":49,"nodeType":"ParameterList","parameters":[{"constant":false,"id":48,"mutability":"mutable","name":"price","nameLocation":"2882:5:0","nodeType":"VariableDeclaration","scope":50,"src":"2857:30:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Price_$151_memory_ptr","typeString":"struct PythStructs.Price"},"typeName":{"id":47,"nodeType":"UserDefinedTypeName","pathNode":{"id":46,"name":"PythStructs.Price","nameLocations":["2857:11:0","2869:5:0"],"nodeType":"IdentifierPath","referencedDeclaration":151,"src":"2857:17:0"},"referencedDeclaration":151,"src":"2857:17:0","typeDescriptions":{"typeIdentifier":"t_struct$_Price_$151_storage_ptr","typeString":"struct PythStructs.Price"}},"visibility":"internal"}],"src":"2856:32:0"},"scope":118,"src":"2761:128:0","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":51,"nodeType":"StructuredDocumentation","src":"2895:925:0","text":"@notice Returns the exponentially-weighted moving average price of a price feed without any sanity checks.\n @dev This function returns the same price as `getEmaPrice` in the case where the price is available.\n However, if the price is not recent this function returns the latest available price.\n The returned price can be from arbitrarily far in the past; this function makes no guarantees that\n the returned price is recent or useful for any particular application.\n Users of this function should check the `publishTime` in the price to ensure that the returned price is\n sufficiently recent for their application. If you are considering using this function, it may be\n safer / easier to use either `getEmaPrice` or `getEmaPriceNoOlderThan`.\n @return price - please read the documentation of PythStructs.Price to understand how to use this safely."},"functionSelector":"9474f45b","id":59,"implemented":false,"kind":"function","modifiers":[],"name":"getEmaPriceUnsafe","nameLocation":"3834:17:0","nodeType":"FunctionDefinition","parameters":{"id":54,"nodeType":"ParameterList","parameters":[{"constant":false,"id":53,"mutability":"mutable","name":"id","nameLocation":"3869:2:0","nodeType":"VariableDeclaration","scope":59,"src":"3861:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":52,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3861:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3851:26:0"},"returnParameters":{"id":58,"nodeType":"ParameterList","parameters":[{"constant":false,"id":57,"mutability":"mutable","name":"price","nameLocation":"3926:5:0","nodeType":"VariableDeclaration","scope":59,"src":"3901:30:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Price_$151_memory_ptr","typeString":"struct PythStructs.Price"},"typeName":{"id":56,"nodeType":"UserDefinedTypeName","pathNode":{"id":55,"name":"PythStructs.Price","nameLocations":["3901:11:0","3913:5:0"],"nodeType":"IdentifierPath","referencedDeclaration":151,"src":"3901:17:0"},"referencedDeclaration":151,"src":"3901:17:0","typeDescriptions":{"typeIdentifier":"t_struct$_Price_$151_storage_ptr","typeString":"struct PythStructs.Price"}},"visibility":"internal"}],"src":"3900:32:0"},"scope":118,"src":"3825:108:0","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":60,"nodeType":"StructuredDocumentation","src":"3939:472:0","text":"@notice Returns the exponentially-weighted moving average price that is no older than `age` seconds\n of the current time.\n @dev This function is a sanity-checked version of `getEmaPriceUnsafe` which is useful in\n applications that require a sufficiently-recent price. Reverts if the price wasn't updated sufficiently\n recently.\n @return price - please read the documentation of PythStructs.Price to understand how to use this safely."},"functionSelector":"711a2e28","id":70,"implemented":false,"kind":"function","modifiers":[],"name":"getEmaPriceNoOlderThan","nameLocation":"4425:22:0","nodeType":"FunctionDefinition","parameters":{"id":65,"nodeType":"ParameterList","parameters":[{"constant":false,"id":62,"mutability":"mutable","name":"id","nameLocation":"4465:2:0","nodeType":"VariableDeclaration","scope":70,"src":"4457:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":61,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4457:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":64,"mutability":"mutable","name":"age","nameLocation":"4482:3:0","nodeType":"VariableDeclaration","scope":70,"src":"4477:8:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":63,"name":"uint","nodeType":"ElementaryTypeName","src":"4477:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4447:44:0"},"returnParameters":{"id":69,"nodeType":"ParameterList","parameters":[{"constant":false,"id":68,"mutability":"mutable","name":"price","nameLocation":"4540:5:0","nodeType":"VariableDeclaration","scope":70,"src":"4515:30:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Price_$151_memory_ptr","typeString":"struct PythStructs.Price"},"typeName":{"id":67,"nodeType":"UserDefinedTypeName","pathNode":{"id":66,"name":"PythStructs.Price","nameLocations":["4515:11:0","4527:5:0"],"nodeType":"IdentifierPath","referencedDeclaration":151,"src":"4515:17:0"},"referencedDeclaration":151,"src":"4515:17:0","typeDescriptions":{"typeIdentifier":"t_struct$_Price_$151_storage_ptr","typeString":"struct PythStructs.Price"}},"visibility":"internal"}],"src":"4514:32:0"},"scope":118,"src":"4416:131:0","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":71,"nodeType":"StructuredDocumentation","src":"4553:535:0","text":"@notice Update price feeds with given update messages.\n This method requires the caller to pay a fee in wei; the required fee can be computed by calling\n `getUpdateFee` with the length of the `updateData` array.\n Prices will be updated if they are more recent than the current stored prices.\n The call will succeed even if the update is not the most recent.\n @dev Reverts if the transferred fee is not sufficient or the updateData is invalid.\n @param updateData Array of price update data."},"functionSelector":"ef9e5e28","id":77,"implemented":false,"kind":"function","modifiers":[],"name":"updatePriceFeeds","nameLocation":"5102:16:0","nodeType":"FunctionDefinition","parameters":{"id":75,"nodeType":"ParameterList","parameters":[{"constant":false,"id":74,"mutability":"mutable","name":"updateData","nameLocation":"5136:10:0","nodeType":"VariableDeclaration","scope":77,"src":"5119:27:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":72,"name":"bytes","nodeType":"ElementaryTypeName","src":"5119:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":73,"nodeType":"ArrayTypeName","src":"5119:7:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"}],"src":"5118:29:0"},"returnParameters":{"id":76,"nodeType":"ParameterList","parameters":[],"src":"5164:0:0"},"scope":118,"src":"5093:72:0","stateMutability":"payable","virtual":false,"visibility":"external"},{"documentation":{"id":78,"nodeType":"StructuredDocumentation","src":"5171:1299:0","text":"@notice Wrapper around updatePriceFeeds that rejects fast if a price update is not necessary. A price update is\n necessary if the current on-chain publishTime is older than the given publishTime. It relies solely on the\n given `publishTimes` for the price feeds and does not read the actual price update publish time within `updateData`.\n This method requires the caller to pay a fee in wei; the required fee can be computed by calling\n `getUpdateFee` with the length of the `updateData` array.\n `priceIds` and `publishTimes` are two arrays with the same size that correspond to senders known publishTime\n of each priceId when calling this method. If all of price feeds within `priceIds` have updated and have\n a newer or equal publish time than the given publish time, it will reject the transaction to save gas.\n Otherwise, it calls updatePriceFeeds method to update the prices.\n @dev Reverts if update is not needed or the transferred fee is not sufficient or the updateData is invalid.\n @param updateData Array of price update data.\n @param priceIds Array of price ids.\n @param publishTimes Array of publishTimes. `publishTimes[i]` corresponds to known `publishTime` of `priceIds[i]`"},"functionSelector":"b9256d28","id":90,"implemented":false,"kind":"function","modifiers":[],"name":"updatePriceFeedsIfNecessary","nameLocation":"6484:27:0","nodeType":"FunctionDefinition","parameters":{"id":88,"nodeType":"ParameterList","parameters":[{"constant":false,"id":81,"mutability":"mutable","name":"updateData","nameLocation":"6538:10:0","nodeType":"VariableDeclaration","scope":90,"src":"6521:27:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":79,"name":"bytes","nodeType":"ElementaryTypeName","src":"6521:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":80,"nodeType":"ArrayTypeName","src":"6521:7:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"},{"constant":false,"id":84,"mutability":"mutable","name":"priceIds","nameLocation":"6577:8:0","nodeType":"VariableDeclaration","scope":90,"src":"6558:27:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":82,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6558:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":83,"nodeType":"ArrayTypeName","src":"6558:9:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":87,"mutability":"mutable","name":"publishTimes","nameLocation":"6613:12:0","nodeType":"VariableDeclaration","scope":90,"src":"6595:30:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint64_$dyn_calldata_ptr","typeString":"uint64[]"},"typeName":{"baseType":{"id":85,"name":"uint64","nodeType":"ElementaryTypeName","src":"6595:6:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"id":86,"nodeType":"ArrayTypeName","src":"6595:8:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint64_$dyn_storage_ptr","typeString":"uint64[]"}},"visibility":"internal"}],"src":"6511:120:0"},"returnParameters":{"id":89,"nodeType":"ParameterList","parameters":[],"src":"6648:0:0"},"scope":118,"src":"6475:174:0","stateMutability":"payable","virtual":false,"visibility":"external"},{"documentation":{"id":91,"nodeType":"StructuredDocumentation","src":"6655:178:0","text":"@notice Returns the required fee to update an array of price updates.\n @param updateData Array of price update data.\n @return feeAmount The required fee in Wei."},"functionSelector":"d47eed45","id":99,"implemented":false,"kind":"function","modifiers":[],"name":"getUpdateFee","nameLocation":"6847:12:0","nodeType":"FunctionDefinition","parameters":{"id":95,"nodeType":"ParameterList","parameters":[{"constant":false,"id":94,"mutability":"mutable","name":"updateData","nameLocation":"6886:10:0","nodeType":"VariableDeclaration","scope":99,"src":"6869:27:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":92,"name":"bytes","nodeType":"ElementaryTypeName","src":"6869:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":93,"nodeType":"ArrayTypeName","src":"6869:7:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"}],"src":"6859:43:0"},"returnParameters":{"id":98,"nodeType":"ParameterList","parameters":[{"constant":false,"id":97,"mutability":"mutable","name":"feeAmount","nameLocation":"6931:9:0","nodeType":"VariableDeclaration","scope":99,"src":"6926:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":96,"name":"uint","nodeType":"ElementaryTypeName","src":"6926:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6925:16:0"},"scope":118,"src":"6838:104:0","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":100,"nodeType":"StructuredDocumentation","src":"6948:1154:0","text":"@notice Parse `updateData` and return price feeds of the given `priceIds` if they are all published\n within `minPublishTime` and `maxPublishTime`.\n You can use this method if you want to use a Pyth price at a fixed time and not the most recent price;\n otherwise, please consider using `updatePriceFeeds`. This method does not store the price updates on-chain.\n This method requires the caller to pay a fee in wei; the required fee can be computed by calling\n `getUpdateFee` with the length of the `updateData` array.\n @dev Reverts if the transferred fee is not sufficient or the updateData is invalid or there is\n no update for any of the given `priceIds` within the given time range.\n @param updateData Array of price update data.\n @param priceIds Array of price ids.\n @param minPublishTime minimum acceptable publishTime for the given `priceIds`.\n @param maxPublishTime maximum acceptable publishTime for the given `priceIds`.\n @return priceFeeds Array of the price feeds corresponding to the given `priceIds` (with the same order)."},"functionSelector":"4716e9c5","id":117,"implemented":false,"kind":"function","modifiers":[],"name":"parsePriceFeedUpdates","nameLocation":"8116:21:0","nodeType":"FunctionDefinition","parameters":{"id":111,"nodeType":"ParameterList","parameters":[{"constant":false,"id":103,"mutability":"mutable","name":"updateData","nameLocation":"8164:10:0","nodeType":"VariableDeclaration","scope":117,"src":"8147:27:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":101,"name":"bytes","nodeType":"ElementaryTypeName","src":"8147:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":102,"nodeType":"ArrayTypeName","src":"8147:7:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"},{"constant":false,"id":106,"mutability":"mutable","name":"priceIds","nameLocation":"8203:8:0","nodeType":"VariableDeclaration","scope":117,"src":"8184:27:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":104,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8184:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":105,"nodeType":"ArrayTypeName","src":"8184:9:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":108,"mutability":"mutable","name":"minPublishTime","nameLocation":"8228:14:0","nodeType":"VariableDeclaration","scope":117,"src":"8221:21:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":107,"name":"uint64","nodeType":"ElementaryTypeName","src":"8221:6:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":110,"mutability":"mutable","name":"maxPublishTime","nameLocation":"8259:14:0","nodeType":"VariableDeclaration","scope":117,"src":"8252:21:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":109,"name":"uint64","nodeType":"ElementaryTypeName","src":"8252:6:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"8137:142:0"},"returnParameters":{"id":116,"nodeType":"ParameterList","parameters":[{"constant":false,"id":115,"mutability":"mutable","name":"priceFeeds","nameLocation":"8337:10:0","nodeType":"VariableDeclaration","scope":117,"src":"8306:41:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_PriceFeed_$160_memory_ptr_$dyn_memory_ptr","typeString":"struct PythStructs.PriceFeed[]"},"typeName":{"baseType":{"id":113,"nodeType":"UserDefinedTypeName","pathNode":{"id":112,"name":"PythStructs.PriceFeed","nameLocations":["8306:11:0","8318:9:0"],"nodeType":"IdentifierPath","referencedDeclaration":160,"src":"8306:21:0"},"referencedDeclaration":160,"src":"8306:21:0","typeDescriptions":{"typeIdentifier":"t_struct$_PriceFeed_$160_storage_ptr","typeString":"struct PythStructs.PriceFeed"}},"id":114,"nodeType":"ArrayTypeName","src":"8306:23:0","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_PriceFeed_$160_storage_$dyn_storage_ptr","typeString":"struct PythStructs.PriceFeed[]"}},"visibility":"internal"}],"src":"8305:43:0"},"scope":118,"src":"8107:242:0","stateMutability":"payable","virtual":false,"visibility":"external"}],"scope":119,"src":"354:7997:0","usedErrors":[]}],"src":"39:8313:0"}},"@pythnetwork/pyth-sdk-solidity/IPythEvents.sol":{"id":1,"ast":{"absolutePath":"@pythnetwork/pyth-sdk-solidity/IPythEvents.sol","exportedSymbols":{"IPythEvents":[140]},"id":141,"license":"Apache-2.0","nodeType":"SourceUnit","nodes":[{"id":120,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"39:23:1"},{"abstract":false,"baseContracts":[],"canonicalName":"IPythEvents","contractDependencies":[],"contractKind":"interface","documentation":{"id":121,"nodeType":"StructuredDocumentation","src":"64:170:1","text":"@title IPythEvents contains the events that Pyth contract emits.\n @dev This interface can be used for listening to the updates for off-chain and testing purposes."},"fullyImplemented":true,"id":140,"linearizedBaseContracts":[140],"name":"IPythEvents","nameLocation":"244:11:1","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":122,"nodeType":"StructuredDocumentation","src":"262:305:1","text":"@dev Emitted when the price feed with `id` has received a fresh update.\n @param id The Pyth Price Feed ID.\n @param publishTime Publish time of the given price update.\n @param price Price of the given price update.\n @param conf Confidence interval of the given price update."},"eventSelector":"d06a6b7f4918494b3719217d1802786c1f5112a6c1d88fe2cfec00b4584f6aec","id":132,"name":"PriceFeedUpdate","nameLocation":"578:15:1","nodeType":"EventDefinition","parameters":{"id":131,"nodeType":"ParameterList","parameters":[{"constant":false,"id":124,"indexed":true,"mutability":"mutable","name":"id","nameLocation":"619:2:1","nodeType":"VariableDeclaration","scope":132,"src":"603:18:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":123,"name":"bytes32","nodeType":"ElementaryTypeName","src":"603:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":126,"indexed":false,"mutability":"mutable","name":"publishTime","nameLocation":"638:11:1","nodeType":"VariableDeclaration","scope":132,"src":"631:18:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":125,"name":"uint64","nodeType":"ElementaryTypeName","src":"631:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":128,"indexed":false,"mutability":"mutable","name":"price","nameLocation":"665:5:1","nodeType":"VariableDeclaration","scope":132,"src":"659:11:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int64","typeString":"int64"},"typeName":{"id":127,"name":"int64","nodeType":"ElementaryTypeName","src":"659:5:1","typeDescriptions":{"typeIdentifier":"t_int64","typeString":"int64"}},"visibility":"internal"},{"constant":false,"id":130,"indexed":false,"mutability":"mutable","name":"conf","nameLocation":"687:4:1","nodeType":"VariableDeclaration","scope":132,"src":"680:11:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":129,"name":"uint64","nodeType":"ElementaryTypeName","src":"680:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"593:104:1"},"src":"572:126:1"},{"anonymous":false,"documentation":{"id":133,"nodeType":"StructuredDocumentation","src":"704:228:1","text":"@dev Emitted when a batch price update is processed successfully.\n @param chainId ID of the source chain that the batch price update comes from.\n @param sequenceNumber Sequence number of the batch price update."},"eventSelector":"943f0e8a16c19895fb87cbeb1a349ed86d7f31923089dd36c1a1ed5e300f267b","id":139,"name":"BatchPriceFeedUpdate","nameLocation":"943:20:1","nodeType":"EventDefinition","parameters":{"id":138,"nodeType":"ParameterList","parameters":[{"constant":false,"id":135,"indexed":false,"mutability":"mutable","name":"chainId","nameLocation":"971:7:1","nodeType":"VariableDeclaration","scope":139,"src":"964:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":134,"name":"uint16","nodeType":"ElementaryTypeName","src":"964:6:1","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":137,"indexed":false,"mutability":"mutable","name":"sequenceNumber","nameLocation":"987:14:1","nodeType":"VariableDeclaration","scope":139,"src":"980:21:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":136,"name":"uint64","nodeType":"ElementaryTypeName","src":"980:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"963:39:1"},"src":"937:66:1"}],"scope":141,"src":"234:771:1","usedErrors":[]}],"src":"39:967:1"}},"@pythnetwork/pyth-sdk-solidity/PythStructs.sol":{"id":2,"ast":{"absolutePath":"@pythnetwork/pyth-sdk-solidity/PythStructs.sol","exportedSymbols":{"PythStructs":[161]},"id":162,"license":"Apache-2.0","nodeType":"SourceUnit","nodes":[{"id":142,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"39:23:2"},{"abstract":false,"baseContracts":[],"canonicalName":"PythStructs","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":161,"linearizedBaseContracts":[161],"name":"PythStructs","nameLocation":"73:11:2","nodeType":"ContractDefinition","nodes":[{"canonicalName":"PythStructs.Price","id":151,"members":[{"constant":false,"id":144,"mutability":"mutable","name":"price","nameLocation":"623:5:2","nodeType":"VariableDeclaration","scope":151,"src":"617:11:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int64","typeString":"int64"},"typeName":{"id":143,"name":"int64","nodeType":"ElementaryTypeName","src":"617:5:2","typeDescriptions":{"typeIdentifier":"t_int64","typeString":"int64"}},"visibility":"internal"},{"constant":false,"id":146,"mutability":"mutable","name":"conf","nameLocation":"693:4:2","nodeType":"VariableDeclaration","scope":151,"src":"686:11:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":145,"name":"uint64","nodeType":"ElementaryTypeName","src":"686:6:2","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":148,"mutability":"mutable","name":"expo","nameLocation":"739:4:2","nodeType":"VariableDeclaration","scope":151,"src":"733:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int32","typeString":"int32"},"typeName":{"id":147,"name":"int32","nodeType":"ElementaryTypeName","src":"733:5:2","typeDescriptions":{"typeIdentifier":"t_int32","typeString":"int32"}},"visibility":"internal"},{"constant":false,"id":150,"mutability":"mutable","name":"publishTime","nameLocation":"824:11:2","nodeType":"VariableDeclaration","scope":151,"src":"819:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":149,"name":"uint","nodeType":"ElementaryTypeName","src":"819:4:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"Price","nameLocation":"584:5:2","nodeType":"StructDefinition","scope":161,"src":"577:265:2","visibility":"public"},{"canonicalName":"PythStructs.PriceFeed","id":160,"members":[{"constant":false,"id":153,"mutability":"mutable","name":"id","nameLocation":"989:2:2","nodeType":"VariableDeclaration","scope":160,"src":"981:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":152,"name":"bytes32","nodeType":"ElementaryTypeName","src":"981:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":156,"mutability":"mutable","name":"price","nameLocation":"1041:5:2","nodeType":"VariableDeclaration","scope":160,"src":"1035:11:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Price_$151_storage_ptr","typeString":"struct PythStructs.Price"},"typeName":{"id":155,"nodeType":"UserDefinedTypeName","pathNode":{"id":154,"name":"Price","nameLocations":["1035:5:2"],"nodeType":"IdentifierPath","referencedDeclaration":151,"src":"1035:5:2"},"referencedDeclaration":151,"src":"1035:5:2","typeDescriptions":{"typeIdentifier":"t_struct$_Price_$151_storage_ptr","typeString":"struct PythStructs.Price"}},"visibility":"internal"},{"constant":false,"id":159,"mutability":"mutable","name":"emaPrice","nameLocation":"1134:8:2","nodeType":"VariableDeclaration","scope":160,"src":"1128:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Price_$151_storage_ptr","typeString":"struct PythStructs.Price"},"typeName":{"id":158,"nodeType":"UserDefinedTypeName","pathNode":{"id":157,"name":"Price","nameLocations":["1128:5:2"],"nodeType":"IdentifierPath","referencedDeclaration":151,"src":"1128:5:2"},"referencedDeclaration":151,"src":"1128:5:2","typeDescriptions":{"typeIdentifier":"t_struct$_Price_$151_storage_ptr","typeString":"struct PythStructs.Price"}},"visibility":"internal"}],"name":"PriceFeed","nameLocation":"936:9:2","nodeType":"StructDefinition","scope":161,"src":"929:220:2","visibility":"public"}],"scope":162,"src":"64:1087:2","usedErrors":[]}],"src":"39:1113:2"}},"contracts/Ownable.sol":{"id":3,"ast":{"absolutePath":"contracts/Ownable.sol","exportedSymbols":{"Ownable":[258]},"id":259,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":163,"literals":["solidity","^","0.8",".16"],"nodeType":"PragmaDirective","src":"32:24:3"},{"abstract":true,"baseContracts":[],"canonicalName":"Ownable","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":258,"linearizedBaseContracts":[258],"name":"Ownable","nameLocation":"76:7:3","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":165,"mutability":"mutable","name":"_owner","nameLocation":"106:6:3","nodeType":"VariableDeclaration","scope":258,"src":"90:22:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":164,"name":"address","nodeType":"ElementaryTypeName","src":"90:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"anonymous":false,"eventSelector":"8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","id":171,"name":"OwnershipTransferred","nameLocation":"124:20:3","nodeType":"EventDefinition","parameters":{"id":170,"nodeType":"ParameterList","parameters":[{"constant":false,"id":167,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"161:13:3","nodeType":"VariableDeclaration","scope":171,"src":"145:29:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":166,"name":"address","nodeType":"ElementaryTypeName","src":"145:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":169,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"192:8:3","nodeType":"VariableDeclaration","scope":171,"src":"176:24:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":168,"name":"address","nodeType":"ElementaryTypeName","src":"176:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"144:57:3"},"src":"118:84:3"},{"body":{"id":188,"nodeType":"Block","src":"223:96:3","statements":[{"expression":{"id":177,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":174,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":165,"src":"233:6:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":175,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"242:3:3","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":176,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"246:6:3","memberName":"sender","nodeType":"MemberAccess","src":"242:10:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"233:19:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":178,"nodeType":"ExpressionStatement","src":"233:19:3"},{"eventCall":{"arguments":[{"arguments":[{"hexValue":"30","id":182,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"297:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":181,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"289:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":180,"name":"address","nodeType":"ElementaryTypeName","src":"289:7:3","typeDescriptions":{}}},"id":183,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"289:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":184,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"301:3:3","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":185,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"305:6:3","memberName":"sender","nodeType":"MemberAccess","src":"301:10:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":179,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":171,"src":"268:20:3","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":186,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"268:44:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":187,"nodeType":"EmitStatement","src":"263:49:3"}]},"id":189,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":172,"nodeType":"ParameterList","parameters":[],"src":"220:2:3"},"returnParameters":{"id":173,"nodeType":"ParameterList","parameters":[],"src":"223:0:3"},"scope":258,"src":"208:111:3","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":196,"nodeType":"Block","src":"372:30:3","statements":[{"expression":{"id":194,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":165,"src":"389:6:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":193,"id":195,"nodeType":"Return","src":"382:13:3"}]},"functionSelector":"8da5cb5b","id":197,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"334:5:3","nodeType":"FunctionDefinition","parameters":{"id":190,"nodeType":"ParameterList","parameters":[],"src":"339:2:3"},"returnParameters":{"id":193,"nodeType":"ParameterList","parameters":[{"constant":false,"id":192,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":197,"src":"363:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":191,"name":"address","nodeType":"ElementaryTypeName","src":"363:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"362:9:3"},"scope":258,"src":"325:77:3","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":208,"nodeType":"Block","src":"429:93:3","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":203,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":200,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":165,"src":"447:6:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":201,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"457:3:3","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":202,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"461:6:3","memberName":"sender","nodeType":"MemberAccess","src":"457:10:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"447:20:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","id":204,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"469:34:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""},"value":"Ownable: caller is not the owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""}],"id":199,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"439:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":205,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"439:65:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":206,"nodeType":"ExpressionStatement","src":"439:65:3"},{"id":207,"nodeType":"PlaceholderStatement","src":"514:1:3"}]},"id":209,"name":"onlyOwner","nameLocation":"417:9:3","nodeType":"ModifierDefinition","parameters":{"id":198,"nodeType":"ParameterList","parameters":[],"src":"426:2:3"},"src":"408:114:3","virtual":false,"visibility":"internal"},{"body":{"id":229,"nodeType":"Block","src":"574:91:3","statements":[{"eventCall":{"arguments":[{"id":215,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":165,"src":"610:6:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":218,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"626:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":217,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"618:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":216,"name":"address","nodeType":"ElementaryTypeName","src":"618:7:3","typeDescriptions":{}}},"id":219,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"618:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":214,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":171,"src":"589:20:3","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":220,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"589:40:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":221,"nodeType":"EmitStatement","src":"584:45:3"},{"expression":{"id":227,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":222,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":165,"src":"639:6:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"hexValue":"30","id":225,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"656:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":224,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"648:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":223,"name":"address","nodeType":"ElementaryTypeName","src":"648:7:3","typeDescriptions":{}}},"id":226,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"648:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"639:19:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":228,"nodeType":"ExpressionStatement","src":"639:19:3"}]},"functionSelector":"715018a6","id":230,"implemented":true,"kind":"function","modifiers":[{"id":212,"kind":"modifierInvocation","modifierName":{"id":211,"name":"onlyOwner","nameLocations":["564:9:3"],"nodeType":"IdentifierPath","referencedDeclaration":209,"src":"564:9:3"},"nodeType":"ModifierInvocation","src":"564:9:3"}],"name":"renounceOwnership","nameLocation":"537:17:3","nodeType":"FunctionDefinition","parameters":{"id":210,"nodeType":"ParameterList","parameters":[],"src":"554:2:3"},"returnParameters":{"id":213,"nodeType":"ParameterList","parameters":[],"src":"574:0:3"},"scope":258,"src":"528:137:3","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":256,"nodeType":"Block","src":"733:170:3","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":243,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":238,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":232,"src":"751:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":241,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"771:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":240,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"763:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":239,"name":"address","nodeType":"ElementaryTypeName","src":"763:7:3","typeDescriptions":{}}},"id":242,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"763:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"751:22:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373","id":244,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"775:40:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""},"value":"Ownable: new owner is the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""}],"id":237,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"743:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":245,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"743:73:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":246,"nodeType":"ExpressionStatement","src":"743:73:3"},{"eventCall":{"arguments":[{"id":248,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":165,"src":"852:6:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":249,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":232,"src":"860:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":247,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":171,"src":"831:20:3","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":250,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"831:38:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":251,"nodeType":"EmitStatement","src":"826:43:3"},{"expression":{"id":254,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":252,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":165,"src":"879:6:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":253,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":232,"src":"888:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"879:17:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":255,"nodeType":"ExpressionStatement","src":"879:17:3"}]},"functionSelector":"f2fde38b","id":257,"implemented":true,"kind":"function","modifiers":[{"id":235,"kind":"modifierInvocation","modifierName":{"id":234,"name":"onlyOwner","nameLocations":["723:9:3"],"nodeType":"IdentifierPath","referencedDeclaration":209,"src":"723:9:3"},"nodeType":"ModifierInvocation","src":"723:9:3"}],"name":"transferOwnership","nameLocation":"680:17:3","nodeType":"FunctionDefinition","parameters":{"id":233,"nodeType":"ParameterList","parameters":[{"constant":false,"id":232,"mutability":"mutable","name":"newOwner","nameLocation":"706:8:3","nodeType":"VariableDeclaration","scope":257,"src":"698:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":231,"name":"address","nodeType":"ElementaryTypeName","src":"698:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"697:18:3"},"returnParameters":{"id":236,"nodeType":"ParameterList","parameters":[],"src":"733:0:3"},"scope":258,"src":"671:232:3","stateMutability":"nonpayable","virtual":false,"visibility":"public"}],"scope":259,"src":"58:847:3","usedErrors":[]}],"src":"32:873:3"}},"contracts/compound/EIP20Interface.sol":{"id":4,"ast":{"absolutePath":"contracts/compound/EIP20Interface.sol","exportedSymbols":{"EIP20Interface":[349]},"id":350,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":260,"literals":["solidity","^","0.8",".16"],"nodeType":"PragmaDirective","src":"32:24:4"},{"abstract":false,"baseContracts":[],"canonicalName":"EIP20Interface","contractDependencies":[],"contractKind":"interface","documentation":{"id":261,"nodeType":"StructuredDocumentation","src":"58:91:4","text":" @title ERC 20 Token Standard Interface\n  https://eips.ethereum.org/EIPS/eip-20"},"fullyImplemented":false,"id":349,"linearizedBaseContracts":[349],"name":"EIP20Interface","nameLocation":"160:14:4","nodeType":"ContractDefinition","nodes":[{"functionSelector":"06fdde03","id":266,"implemented":false,"kind":"function","modifiers":[],"name":"name","nameLocation":"190:4:4","nodeType":"FunctionDefinition","parameters":{"id":262,"nodeType":"ParameterList","parameters":[],"src":"194:2:4"},"returnParameters":{"id":265,"nodeType":"ParameterList","parameters":[{"constant":false,"id":264,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":266,"src":"220:13:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":263,"name":"string","nodeType":"ElementaryTypeName","src":"220:6:4","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"219:15:4"},"scope":349,"src":"181:54:4","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"95d89b41","id":271,"implemented":false,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"249:6:4","nodeType":"FunctionDefinition","parameters":{"id":267,"nodeType":"ParameterList","parameters":[],"src":"255:2:4"},"returnParameters":{"id":270,"nodeType":"ParameterList","parameters":[{"constant":false,"id":269,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":271,"src":"281:13:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":268,"name":"string","nodeType":"ElementaryTypeName","src":"281:6:4","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"280:15:4"},"scope":349,"src":"240:56:4","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"313ce567","id":276,"implemented":false,"kind":"function","modifiers":[],"name":"decimals","nameLocation":"310:8:4","nodeType":"FunctionDefinition","parameters":{"id":272,"nodeType":"ParameterList","parameters":[],"src":"318:2:4"},"returnParameters":{"id":275,"nodeType":"ParameterList","parameters":[{"constant":false,"id":274,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":276,"src":"344:5:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":273,"name":"uint8","nodeType":"ElementaryTypeName","src":"344:5:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"343:7:4"},"scope":349,"src":"301:50:4","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":277,"nodeType":"StructuredDocumentation","src":"357:111:4","text":" @notice Get the total number of tokens in circulation\n @return The supply of tokens"},"functionSelector":"18160ddd","id":282,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"482:11:4","nodeType":"FunctionDefinition","parameters":{"id":278,"nodeType":"ParameterList","parameters":[],"src":"493:2:4"},"returnParameters":{"id":281,"nodeType":"ParameterList","parameters":[{"constant":false,"id":280,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":282,"src":"519:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":279,"name":"uint256","nodeType":"ElementaryTypeName","src":"519:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"518:9:4"},"scope":349,"src":"473:55:4","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":283,"nodeType":"StructuredDocumentation","src":"534:176:4","text":" @notice Gets the balance of the specified address\n @param owner The address from which the balance will be retrieved\n @return balance The balance"},"functionSelector":"70a08231","id":290,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"724:9:4","nodeType":"FunctionDefinition","parameters":{"id":286,"nodeType":"ParameterList","parameters":[{"constant":false,"id":285,"mutability":"mutable","name":"owner","nameLocation":"742:5:4","nodeType":"VariableDeclaration","scope":290,"src":"734:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":284,"name":"address","nodeType":"ElementaryTypeName","src":"734:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"733:15:4"},"returnParameters":{"id":289,"nodeType":"ParameterList","parameters":[{"constant":false,"id":288,"mutability":"mutable","name":"balance","nameLocation":"780:7:4","nodeType":"VariableDeclaration","scope":290,"src":"772:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":287,"name":"uint256","nodeType":"ElementaryTypeName","src":"772:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"771:17:4"},"scope":349,"src":"715:74:4","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":291,"nodeType":"StructuredDocumentation","src":"795:255:4","text":" @notice Transfer `amount` tokens from `msg.sender` to `dst`\n @param dst The address of the destination account\n @param amount The number of tokens to transfer\n @return success Whether or not the transfer succeeded"},"functionSelector":"a9059cbb","id":300,"implemented":false,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"1064:8:4","nodeType":"FunctionDefinition","parameters":{"id":296,"nodeType":"ParameterList","parameters":[{"constant":false,"id":293,"mutability":"mutable","name":"dst","nameLocation":"1081:3:4","nodeType":"VariableDeclaration","scope":300,"src":"1073:11:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":292,"name":"address","nodeType":"ElementaryTypeName","src":"1073:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":295,"mutability":"mutable","name":"amount","nameLocation":"1094:6:4","nodeType":"VariableDeclaration","scope":300,"src":"1086:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":294,"name":"uint256","nodeType":"ElementaryTypeName","src":"1086:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1072:29:4"},"returnParameters":{"id":299,"nodeType":"ParameterList","parameters":[{"constant":false,"id":298,"mutability":"mutable","name":"success","nameLocation":"1125:7:4","nodeType":"VariableDeclaration","scope":300,"src":"1120:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":297,"name":"bool","nodeType":"ElementaryTypeName","src":"1120:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1119:14:4"},"scope":349,"src":"1055:79:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":301,"nodeType":"StructuredDocumentation","src":"1140:301:4","text":" @notice Transfer `amount` tokens from `src` to `dst`\n @param src The address of the source account\n @param dst The address of the destination account\n @param amount The number of tokens to transfer\n @return success Whether or not the transfer succeeded"},"functionSelector":"23b872dd","id":312,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"1455:12:4","nodeType":"FunctionDefinition","parameters":{"id":308,"nodeType":"ParameterList","parameters":[{"constant":false,"id":303,"mutability":"mutable","name":"src","nameLocation":"1476:3:4","nodeType":"VariableDeclaration","scope":312,"src":"1468:11:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":302,"name":"address","nodeType":"ElementaryTypeName","src":"1468:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":305,"mutability":"mutable","name":"dst","nameLocation":"1489:3:4","nodeType":"VariableDeclaration","scope":312,"src":"1481:11:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":304,"name":"address","nodeType":"ElementaryTypeName","src":"1481:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":307,"mutability":"mutable","name":"amount","nameLocation":"1502:6:4","nodeType":"VariableDeclaration","scope":312,"src":"1494:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":306,"name":"uint256","nodeType":"ElementaryTypeName","src":"1494:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1467:42:4"},"returnParameters":{"id":311,"nodeType":"ParameterList","parameters":[{"constant":false,"id":310,"mutability":"mutable","name":"success","nameLocation":"1533:7:4","nodeType":"VariableDeclaration","scope":312,"src":"1528:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":309,"name":"bool","nodeType":"ElementaryTypeName","src":"1528:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1527:14:4"},"scope":349,"src":"1446:96:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":313,"nodeType":"StructuredDocumentation","src":"1548:464:4","text":" @notice Approve `spender` to transfer up to `amount` from `src`\n @dev This will overwrite the approval amount for `spender`\n  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\n @param spender The address of the account which may transfer tokens\n @param amount The number of tokens that are approved (-1 means infinite)\n @return success Whether or not the approval succeeded"},"functionSelector":"095ea7b3","id":322,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"2026:7:4","nodeType":"FunctionDefinition","parameters":{"id":318,"nodeType":"ParameterList","parameters":[{"constant":false,"id":315,"mutability":"mutable","name":"spender","nameLocation":"2042:7:4","nodeType":"VariableDeclaration","scope":322,"src":"2034:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":314,"name":"address","nodeType":"ElementaryTypeName","src":"2034:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":317,"mutability":"mutable","name":"amount","nameLocation":"2059:6:4","nodeType":"VariableDeclaration","scope":322,"src":"2051:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":316,"name":"uint256","nodeType":"ElementaryTypeName","src":"2051:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2033:33:4"},"returnParameters":{"id":321,"nodeType":"ParameterList","parameters":[{"constant":false,"id":320,"mutability":"mutable","name":"success","nameLocation":"2090:7:4","nodeType":"VariableDeclaration","scope":322,"src":"2085:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":319,"name":"bool","nodeType":"ElementaryTypeName","src":"2085:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2084:14:4"},"scope":349,"src":"2017:82:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":323,"nodeType":"StructuredDocumentation","src":"2105:326:4","text":" @notice Get the current allowance from `owner` for `spender`\n @param owner The address of the account which owns the tokens to be spent\n @param spender The address of the account which may transfer tokens\n @return remaining The number of tokens allowed to be spent (-1 means infinite)"},"functionSelector":"dd62ed3e","id":332,"implemented":false,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"2445:9:4","nodeType":"FunctionDefinition","parameters":{"id":328,"nodeType":"ParameterList","parameters":[{"constant":false,"id":325,"mutability":"mutable","name":"owner","nameLocation":"2463:5:4","nodeType":"VariableDeclaration","scope":332,"src":"2455:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":324,"name":"address","nodeType":"ElementaryTypeName","src":"2455:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":327,"mutability":"mutable","name":"spender","nameLocation":"2478:7:4","nodeType":"VariableDeclaration","scope":332,"src":"2470:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":326,"name":"address","nodeType":"ElementaryTypeName","src":"2470:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2454:32:4"},"returnParameters":{"id":331,"nodeType":"ParameterList","parameters":[{"constant":false,"id":330,"mutability":"mutable","name":"remaining","nameLocation":"2518:9:4","nodeType":"VariableDeclaration","scope":332,"src":"2510:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":329,"name":"uint256","nodeType":"ElementaryTypeName","src":"2510:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2509:19:4"},"scope":349,"src":"2436:93:4","stateMutability":"view","virtual":false,"visibility":"external"},{"anonymous":false,"eventSelector":"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","id":340,"name":"Transfer","nameLocation":"2541:8:4","nodeType":"EventDefinition","parameters":{"id":339,"nodeType":"ParameterList","parameters":[{"constant":false,"id":334,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"2566:4:4","nodeType":"VariableDeclaration","scope":340,"src":"2550:20:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":333,"name":"address","nodeType":"ElementaryTypeName","src":"2550:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":336,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"2588:2:4","nodeType":"VariableDeclaration","scope":340,"src":"2572:18:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":335,"name":"address","nodeType":"ElementaryTypeName","src":"2572:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":338,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"2600:6:4","nodeType":"VariableDeclaration","scope":340,"src":"2592:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":337,"name":"uint256","nodeType":"ElementaryTypeName","src":"2592:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2549:58:4"},"src":"2535:73:4"},{"anonymous":false,"eventSelector":"8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925","id":348,"name":"Approval","nameLocation":"2619:8:4","nodeType":"EventDefinition","parameters":{"id":347,"nodeType":"ParameterList","parameters":[{"constant":false,"id":342,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"2644:5:4","nodeType":"VariableDeclaration","scope":348,"src":"2628:21:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":341,"name":"address","nodeType":"ElementaryTypeName","src":"2628:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":344,"indexed":true,"mutability":"mutable","name":"spender","nameLocation":"2667:7:4","nodeType":"VariableDeclaration","scope":348,"src":"2651:23:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":343,"name":"address","nodeType":"ElementaryTypeName","src":"2651:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":346,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"2684:6:4","nodeType":"VariableDeclaration","scope":348,"src":"2676:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":345,"name":"uint256","nodeType":"ElementaryTypeName","src":"2676:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2627:64:4"},"src":"2613:79:4"}],"scope":350,"src":"150:2544:4","usedErrors":[]}],"src":"32:2663:4"}},"contracts/oracle/PythAdaptor.sol":{"id":5,"ast":{"absolutePath":"contracts/oracle/PythAdaptor.sol","exportedSymbols":{"EIP20Interface":[349],"IPyth":[118],"IPythEvents":[140],"Ownable":[258],"PythAdaptor":[517],"PythStructs":[161],"cTokenInterface":[360]},"id":518,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":351,"literals":["solidity","^","0.8",".16"],"nodeType":"PragmaDirective","src":"32:24:5"},{"absolutePath":"contracts/compound/EIP20Interface.sol","file":"../compound/EIP20Interface.sol","id":352,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":518,"sourceUnit":350,"src":"58:40:5","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/Ownable.sol","file":"../Ownable.sol","id":353,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":518,"sourceUnit":259,"src":"99:24:5","symbolAliases":[],"unitAlias":""},{"absolutePath":"@pythnetwork/pyth-sdk-solidity/IPyth.sol","file":"@pythnetwork/pyth-sdk-solidity/IPyth.sol","id":354,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":518,"sourceUnit":119,"src":"124:50:5","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"cTokenInterface","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":360,"linearizedBaseContracts":[360],"name":"cTokenInterface","nameLocation":"186:15:5","nodeType":"ContractDefinition","nodes":[{"functionSelector":"6f307dc3","id":359,"implemented":false,"kind":"function","modifiers":[],"name":"underlying","nameLocation":"217:10:5","nodeType":"FunctionDefinition","parameters":{"id":355,"nodeType":"ParameterList","parameters":[],"src":"227:2:5"},"returnParameters":{"id":358,"nodeType":"ParameterList","parameters":[{"constant":false,"id":357,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":359,"src":"253:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":356,"name":"address","nodeType":"ElementaryTypeName","src":"253:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"252:9:5"},"scope":360,"src":"208:54:5","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":518,"src":"176:88:5","usedErrors":[]},{"abstract":false,"baseContracts":[{"baseName":{"id":361,"name":"Ownable","nameLocations":["290:7:5"],"nodeType":"IdentifierPath","referencedDeclaration":258,"src":"290:7:5"},"id":362,"nodeType":"InheritanceSpecifier","src":"290:7:5"}],"canonicalName":"PythAdaptor","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":517,"linearizedBaseContracts":[517,258],"name":"PythAdaptor","nameLocation":"275:11:5","nodeType":"ContractDefinition","nodes":[{"constant":false,"functionSelector":"121b505f","id":365,"mutability":"mutable","name":"pythMain","nameLocation":"317:8:5","nodeType":"VariableDeclaration","scope":517,"src":"304:21:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IPyth_$118","typeString":"contract IPyth"},"typeName":{"id":364,"nodeType":"UserDefinedTypeName","pathNode":{"id":363,"name":"IPyth","nameLocations":["304:5:5"],"nodeType":"IdentifierPath","referencedDeclaration":118,"src":"304:5:5"},"referencedDeclaration":118,"src":"304:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IPyth_$118","typeString":"contract IPyth"}},"visibility":"public"},{"constant":false,"functionSelector":"d87ac65f","id":369,"mutability":"mutable","name":"tokenFeeds","nameLocation":"367:10:5","nodeType":"VariableDeclaration","scope":517,"src":"332:45:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bytes32_$","typeString":"mapping(address => bytes32)"},"typeName":{"id":368,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":366,"name":"address","nodeType":"ElementaryTypeName","src":"340:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"332:27:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bytes32_$","typeString":"mapping(address => bytes32)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":367,"name":"bytes32","nodeType":"ElementaryTypeName","src":"351:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}},"visibility":"public"},{"body":{"id":380,"nodeType":"Block","src":"415:44:5","statements":[{"expression":{"id":378,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":374,"name":"pythMain","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":365,"src":"425:8:5","typeDescriptions":{"typeIdentifier":"t_contract$_IPyth_$118","typeString":"contract IPyth"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":376,"name":"_pythMain","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":371,"src":"442:9:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":375,"name":"IPyth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":118,"src":"436:5:5","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IPyth_$118_$","typeString":"type(contract IPyth)"}},"id":377,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"436:16:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IPyth_$118","typeString":"contract IPyth"}},"src":"425:27:5","typeDescriptions":{"typeIdentifier":"t_contract$_IPyth_$118","typeString":"contract IPyth"}},"id":379,"nodeType":"ExpressionStatement","src":"425:27:5"}]},"id":381,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":372,"nodeType":"ParameterList","parameters":[{"constant":false,"id":371,"mutability":"mutable","name":"_pythMain","nameLocation":"404:9:5","nodeType":"VariableDeclaration","scope":381,"src":"396:17:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":370,"name":"address","nodeType":"ElementaryTypeName","src":"396:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"395:19:5"},"returnParameters":{"id":373,"nodeType":"ParameterList","parameters":[],"src":"415:0:5"},"scope":517,"src":"384:75:5","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":424,"nodeType":"Block","src":"560:181:5","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":397,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":393,"name":"tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":384,"src":"578:6:5","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":394,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"585:6:5","memberName":"length","nodeType":"MemberAccess","src":"578:13:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":395,"name":"feeds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":387,"src":"595:5:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":396,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"601:6:5","memberName":"length","nodeType":"MemberAccess","src":"595:12:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"578:29:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4c656e677468206d69736d61746368","id":398,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"609:17:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_bb46a6fe2ea6b18f462b236ffc808abf66026114a0bc6a6c72c11149e00d9ea8","typeString":"literal_string \"Length mismatch\""},"value":"Length mismatch"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_bb46a6fe2ea6b18f462b236ffc808abf66026114a0bc6a6c72c11149e00d9ea8","typeString":"literal_string \"Length mismatch\""}],"id":392,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"570:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":399,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"570:57:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":400,"nodeType":"ExpressionStatement","src":"570:57:5"},{"body":{"id":422,"nodeType":"Block","src":"678:57:5","statements":[{"expression":{"id":420,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":412,"name":"tokenFeeds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":369,"src":"692:10:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bytes32_$","typeString":"mapping(address => bytes32)"}},"id":416,"indexExpression":{"baseExpression":{"id":413,"name":"tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":384,"src":"703:6:5","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":415,"indexExpression":{"id":414,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":402,"src":"710:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"703:9:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"692:21:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":417,"name":"feeds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":387,"src":"716:5:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":419,"indexExpression":{"id":418,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":402,"src":"722:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"716:8:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"692:32:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":421,"nodeType":"ExpressionStatement","src":"692:32:5"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":408,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":405,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":402,"src":"654:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":406,"name":"tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":384,"src":"658:6:5","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":407,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"665:6:5","memberName":"length","nodeType":"MemberAccess","src":"658:13:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"654:17:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":423,"initializationExpression":{"assignments":[402],"declarations":[{"constant":false,"id":402,"mutability":"mutable","name":"i","nameLocation":"647:1:5","nodeType":"VariableDeclaration","scope":423,"src":"642:6:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":401,"name":"uint","nodeType":"ElementaryTypeName","src":"642:4:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":404,"initialValue":{"hexValue":"30","id":403,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"651:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"642:10:5"},"loopExpression":{"expression":{"id":410,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"673:3:5","subExpression":{"id":409,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":402,"src":"673:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":411,"nodeType":"ExpressionStatement","src":"673:3:5"},"nodeType":"ForStatement","src":"637:98:5"}]},"functionSelector":"ef79f460","id":425,"implemented":true,"kind":"function","modifiers":[{"id":390,"kind":"modifierInvocation","modifierName":{"id":389,"name":"onlyOwner","nameLocations":["550:9:5"],"nodeType":"IdentifierPath","referencedDeclaration":209,"src":"550:9:5"},"nodeType":"ModifierInvocation","src":"550:9:5"}],"name":"setTokenFeeds","nameLocation":"474:13:5","nodeType":"FunctionDefinition","parameters":{"id":388,"nodeType":"ParameterList","parameters":[{"constant":false,"id":384,"mutability":"mutable","name":"tokens","nameLocation":"507:6:5","nodeType":"VariableDeclaration","scope":425,"src":"488:25:5","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":382,"name":"address","nodeType":"ElementaryTypeName","src":"488:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":383,"nodeType":"ArrayTypeName","src":"488:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":387,"mutability":"mutable","name":"feeds","nameLocation":"534:5:5","nodeType":"VariableDeclaration","scope":425,"src":"515:24:5","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":385,"name":"bytes32","nodeType":"ElementaryTypeName","src":"515:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":386,"nodeType":"ArrayTypeName","src":"515:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"487:53:5"},"returnParameters":{"id":391,"nodeType":"ParameterList","parameters":[],"src":"560:0:5"},"scope":517,"src":"465:276:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":515,"nodeType":"Block","src":"1143:515:5","statements":[{"assignments":[433],"declarations":[{"constant":false,"id":433,"mutability":"mutable","name":"underlyingToken","nameLocation":"1161:15:5","nodeType":"VariableDeclaration","scope":515,"src":"1153:23:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":432,"name":"address","nodeType":"ElementaryTypeName","src":"1153:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":439,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":435,"name":"cToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":427,"src":"1195:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":434,"name":"cTokenInterface","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":360,"src":"1179:15:5","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_cTokenInterface_$360_$","typeString":"type(contract cTokenInterface)"}},"id":436,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1179:23:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_cTokenInterface_$360","typeString":"contract cTokenInterface"}},"id":437,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1203:10:5","memberName":"underlying","nodeType":"MemberAccess","referencedDeclaration":359,"src":"1179:34:5","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":438,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1179:36:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"1153:62:5"},{"assignments":[441],"declarations":[{"constant":false,"id":441,"mutability":"mutable","name":"tokenFeed","nameLocation":"1233:9:5","nodeType":"VariableDeclaration","scope":515,"src":"1225:17:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":440,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1225:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":445,"initialValue":{"baseExpression":{"id":442,"name":"tokenFeeds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":369,"src":"1245:10:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bytes32_$","typeString":"mapping(address => bytes32)"}},"id":444,"indexExpression":{"id":443,"name":"underlyingToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":433,"src":"1256:15:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1245:27:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"1225:47:5"},{"assignments":[450],"declarations":[{"constant":false,"id":450,"mutability":"mutable","name":"tokenPrice","nameLocation":"1307:10:5","nodeType":"VariableDeclaration","scope":515,"src":"1282:35:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Price_$151_memory_ptr","typeString":"struct PythStructs.Price"},"typeName":{"id":449,"nodeType":"UserDefinedTypeName","pathNode":{"id":448,"name":"PythStructs.Price","nameLocations":["1282:11:5","1294:5:5"],"nodeType":"IdentifierPath","referencedDeclaration":151,"src":"1282:17:5"},"referencedDeclaration":151,"src":"1282:17:5","typeDescriptions":{"typeIdentifier":"t_struct$_Price_$151_storage_ptr","typeString":"struct PythStructs.Price"}},"visibility":"internal"}],"id":455,"initialValue":{"arguments":[{"id":453,"name":"tokenFeed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":441,"src":"1344:9:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":451,"name":"pythMain","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":365,"src":"1320:8:5","typeDescriptions":{"typeIdentifier":"t_contract$_IPyth_$118","typeString":"contract IPyth"}},"id":452,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1329:14:5","memberName":"getPriceUnsafe","nodeType":"MemberAccess","referencedDeclaration":39,"src":"1320:23:5","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_bytes32_$returns$_t_struct$_Price_$151_memory_ptr_$","typeString":"function (bytes32) view external returns (struct PythStructs.Price memory)"}},"id":454,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1320:34:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Price_$151_memory_ptr","typeString":"struct PythStructs.Price memory"}},"nodeType":"VariableDeclarationStatement","src":"1282:72:5"},{"assignments":[457],"declarations":[{"constant":false,"id":457,"mutability":"mutable","name":"priceExpo","nameLocation":"1371:9:5","nodeType":"VariableDeclaration","scope":515,"src":"1364:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":456,"name":"uint32","nodeType":"ElementaryTypeName","src":"1364:6:5","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"id":474,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_int32","typeString":"int32"},"id":461,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":458,"name":"tokenPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":450,"src":"1383:10:5","typeDescriptions":{"typeIdentifier":"t_struct$_Price_$151_memory_ptr","typeString":"struct PythStructs.Price memory"}},"id":459,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1394:4:5","memberName":"expo","nodeType":"MemberAccess","referencedDeclaration":148,"src":"1383:15:5","typeDescriptions":{"typeIdentifier":"t_int32","typeString":"int32"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":460,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1401:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1383:19:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"arguments":[{"id":471,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"1438:16:5","subExpression":{"expression":{"id":469,"name":"tokenPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":450,"src":"1439:10:5","typeDescriptions":{"typeIdentifier":"t_struct$_Price_$151_memory_ptr","typeString":"struct PythStructs.Price memory"}},"id":470,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1450:4:5","memberName":"expo","nodeType":"MemberAccess","referencedDeclaration":148,"src":"1439:15:5","typeDescriptions":{"typeIdentifier":"t_int32","typeString":"int32"}},"typeDescriptions":{"typeIdentifier":"t_int32","typeString":"int32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int32","typeString":"int32"}],"id":468,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1431:6:5","typeDescriptions":{"typeIdentifier":"t_type$_t_uint32_$","typeString":"type(uint32)"},"typeName":{"id":467,"name":"uint32","nodeType":"ElementaryTypeName","src":"1431:6:5","typeDescriptions":{}}},"id":472,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1431:24:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"id":473,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1383:72:5","trueExpression":{"arguments":[{"expression":{"id":464,"name":"tokenPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":450,"src":"1412:10:5","typeDescriptions":{"typeIdentifier":"t_struct$_Price_$151_memory_ptr","typeString":"struct PythStructs.Price memory"}},"id":465,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1423:4:5","memberName":"expo","nodeType":"MemberAccess","referencedDeclaration":148,"src":"1412:15:5","typeDescriptions":{"typeIdentifier":"t_int32","typeString":"int32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int32","typeString":"int32"}],"id":463,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1405:6:5","typeDescriptions":{"typeIdentifier":"t_type$_t_uint32_$","typeString":"type(uint32)"},"typeName":{"id":462,"name":"uint32","nodeType":"ElementaryTypeName","src":"1405:6:5","typeDescriptions":{}}},"id":466,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1405:23:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"VariableDeclarationStatement","src":"1364:91:5"},{"assignments":[476],"declarations":[{"constant":false,"id":476,"mutability":"mutable","name":"tPrice","nameLocation":"1472:6:5","nodeType":"VariableDeclaration","scope":515,"src":"1465:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":475,"name":"uint64","nodeType":"ElementaryTypeName","src":"1465:6:5","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"id":488,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_int64","typeString":"int64"},"id":480,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":477,"name":"tokenPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":450,"src":"1481:10:5","typeDescriptions":{"typeIdentifier":"t_struct$_Price_$151_memory_ptr","typeString":"struct PythStructs.Price memory"}},"id":478,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1492:5:5","memberName":"price","nodeType":"MemberAccess","referencedDeclaration":144,"src":"1481:16:5","typeDescriptions":{"typeIdentifier":"t_int64","typeString":"int64"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":479,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1500:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1481:20:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":486,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1531:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":487,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1481:51:5","trueExpression":{"arguments":[{"expression":{"id":483,"name":"tokenPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":450,"src":"1511:10:5","typeDescriptions":{"typeIdentifier":"t_struct$_Price_$151_memory_ptr","typeString":"struct PythStructs.Price memory"}},"id":484,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1522:5:5","memberName":"price","nodeType":"MemberAccess","referencedDeclaration":144,"src":"1511:16:5","typeDescriptions":{"typeIdentifier":"t_int64","typeString":"int64"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int64","typeString":"int64"}],"id":482,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1504:6:5","typeDescriptions":{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"},"typeName":{"id":481,"name":"uint64","nodeType":"ElementaryTypeName","src":"1504:6:5","typeDescriptions":{}}},"id":485,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1504:24:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"VariableDeclarationStatement","src":"1465:67:5"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":513,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":501,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":494,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":491,"name":"tPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":476,"src":"1554:6:5","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint64","typeString":"uint64"}],"id":490,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1549:4:5","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":489,"name":"uint","nodeType":"ElementaryTypeName","src":"1549:4:5","typeDescriptions":{}}},"id":492,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1549:12:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"31653336","id":493,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1564:4:5","typeDescriptions":{"typeIdentifier":"t_rational_1000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(29 digits omitted)...0000"},"value":"1e36"},"src":"1549:19:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":499,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":497,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1576:2:5","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"id":498,"name":"priceExpo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":457,"src":"1582:9:5","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"src":"1576:15:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":496,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1571:4:5","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":495,"name":"uint","nodeType":"ElementaryTypeName","src":"1571:4:5","typeDescriptions":{}}},"id":500,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1571:21:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1549:43:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":512,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":502,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1595:2:5","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"components":[{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":506,"name":"underlyingToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":433,"src":"1622:15:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":505,"name":"EIP20Interface","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":349,"src":"1607:14:5","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_EIP20Interface_$349_$","typeString":"type(contract EIP20Interface)"}},"id":507,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1607:31:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_EIP20Interface_$349","typeString":"contract EIP20Interface"}},"id":508,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1639:8:5","memberName":"decimals","nodeType":"MemberAccess","referencedDeclaration":276,"src":"1607:40:5","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_uint8_$","typeString":"function () view external returns (uint8)"}},"id":509,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1607:42:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":504,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1602:4:5","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":503,"name":"uint","nodeType":"ElementaryTypeName","src":"1602:4:5","typeDescriptions":{}}},"id":510,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1602:48:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":511,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1601:50:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1595:56:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1549:102:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":431,"id":514,"nodeType":"Return","src":"1542:109:5"}]},"functionSelector":"fc57d4df","id":516,"implemented":true,"kind":"function","modifiers":[],"name":"getUnderlyingPrice","nameLocation":"1079:18:5","nodeType":"FunctionDefinition","parameters":{"id":428,"nodeType":"ParameterList","parameters":[{"constant":false,"id":427,"mutability":"mutable","name":"cToken","nameLocation":"1106:6:5","nodeType":"VariableDeclaration","scope":516,"src":"1098:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":426,"name":"address","nodeType":"ElementaryTypeName","src":"1098:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1097:16:5"},"returnParameters":{"id":431,"nodeType":"ParameterList","parameters":[{"constant":false,"id":430,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":516,"src":"1137:4:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":429,"name":"uint","nodeType":"ElementaryTypeName","src":"1137:4:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1136:6:5"},"scope":517,"src":"1070:588:5","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":518,"src":"266:1394:5","usedErrors":[]}],"src":"32:1628:5"}}},"contracts":{"@pythnetwork/pyth-sdk-solidity/IPyth.sol":{"IPyth":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint16","name":"chainId","type":"uint16"},{"indexed":false,"internalType":"uint64","name":"sequenceNumber","type":"uint64"}],"name":"BatchPriceFeedUpdate","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"id","type":"bytes32"},{"indexed":false,"internalType":"uint64","name":"publishTime","type":"uint64"},{"indexed":false,"internalType":"int64","name":"price","type":"int64"},{"indexed":false,"internalType":"uint64","name":"conf","type":"uint64"}],"name":"PriceFeedUpdate","type":"event"},{"inputs":[{"internalType":"bytes32","name":"id","type":"bytes32"}],"name":"getEmaPrice","outputs":[{"components":[{"internalType":"int64","name":"price","type":"int64"},{"internalType":"uint64","name":"conf","type":"uint64"},{"internalType":"int32","name":"expo","type":"int32"},{"internalType":"uint256","name":"publishTime","type":"uint256"}],"internalType":"struct PythStructs.Price","name":"price","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"id","type":"bytes32"},{"internalType":"uint256","name":"age","type":"uint256"}],"name":"getEmaPriceNoOlderThan","outputs":[{"components":[{"internalType":"int64","name":"price","type":"int64"},{"internalType":"uint64","name":"conf","type":"uint64"},{"internalType":"int32","name":"expo","type":"int32"},{"internalType":"uint256","name":"publishTime","type":"uint256"}],"internalType":"struct PythStructs.Price","name":"price","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"id","type":"bytes32"}],"name":"getEmaPriceUnsafe","outputs":[{"components":[{"internalType":"int64","name":"price","type":"int64"},{"internalType":"uint64","name":"conf","type":"uint64"},{"internalType":"int32","name":"expo","type":"int32"},{"internalType":"uint256","name":"publishTime","type":"uint256"}],"internalType":"struct PythStructs.Price","name":"price","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"id","type":"bytes32"}],"name":"getPrice","outputs":[{"components":[{"internalType":"int64","name":"price","type":"int64"},{"internalType":"uint64","name":"conf","type":"uint64"},{"internalType":"int32","name":"expo","type":"int32"},{"internalType":"uint256","name":"publishTime","type":"uint256"}],"internalType":"struct PythStructs.Price","name":"price","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"id","type":"bytes32"},{"internalType":"uint256","name":"age","type":"uint256"}],"name":"getPriceNoOlderThan","outputs":[{"components":[{"internalType":"int64","name":"price","type":"int64"},{"internalType":"uint64","name":"conf","type":"uint64"},{"internalType":"int32","name":"expo","type":"int32"},{"internalType":"uint256","name":"publishTime","type":"uint256"}],"internalType":"struct PythStructs.Price","name":"price","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"id","type":"bytes32"}],"name":"getPriceUnsafe","outputs":[{"components":[{"internalType":"int64","name":"price","type":"int64"},{"internalType":"uint64","name":"conf","type":"uint64"},{"internalType":"int32","name":"expo","type":"int32"},{"internalType":"uint256","name":"publishTime","type":"uint256"}],"internalType":"struct PythStructs.Price","name":"price","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes[]","name":"updateData","type":"bytes[]"}],"name":"getUpdateFee","outputs":[{"internalType":"uint256","name":"feeAmount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getValidTimePeriod","outputs":[{"internalType":"uint256","name":"validTimePeriod","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes[]","name":"updateData","type":"bytes[]"},{"internalType":"bytes32[]","name":"priceIds","type":"bytes32[]"},{"internalType":"uint64","name":"minPublishTime","type":"uint64"},{"internalType":"uint64","name":"maxPublishTime","type":"uint64"}],"name":"parsePriceFeedUpdates","outputs":[{"components":[{"internalType":"bytes32","name":"id","type":"bytes32"},{"components":[{"internalType":"int64","name":"price","type":"int64"},{"internalType":"uint64","name":"conf","type":"uint64"},{"internalType":"int32","name":"expo","type":"int32"},{"internalType":"uint256","name":"publishTime","type":"uint256"}],"internalType":"struct PythStructs.Price","name":"price","type":"tuple"},{"components":[{"internalType":"int64","name":"price","type":"int64"},{"internalType":"uint64","name":"conf","type":"uint64"},{"internalType":"int32","name":"expo","type":"int32"},{"internalType":"uint256","name":"publishTime","type":"uint256"}],"internalType":"struct PythStructs.Price","name":"emaPrice","type":"tuple"}],"internalType":"struct PythStructs.PriceFeed[]","name":"priceFeeds","type":"tuple[]"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes[]","name":"updateData","type":"bytes[]"}],"name":"updatePriceFeeds","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes[]","name":"updateData","type":"bytes[]"},{"internalType":"bytes32[]","name":"priceIds","type":"bytes32[]"},{"internalType":"uint64[]","name":"publishTimes","type":"uint64[]"}],"name":"updatePriceFeedsIfNecessary","outputs":[],"stateMutability":"payable","type":"function"}],"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"sequenceNumber\",\"type\":\"uint64\"}],\"name\":\"BatchPriceFeedUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"publishTime\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"int64\",\"name\":\"price\",\"type\":\"int64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"conf\",\"type\":\"uint64\"}],\"name\":\"PriceFeedUpdate\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"getEmaPrice\",\"outputs\":[{\"components\":[{\"internalType\":\"int64\",\"name\":\"price\",\"type\":\"int64\"},{\"internalType\":\"uint64\",\"name\":\"conf\",\"type\":\"uint64\"},{\"internalType\":\"int32\",\"name\":\"expo\",\"type\":\"int32\"},{\"internalType\":\"uint256\",\"name\":\"publishTime\",\"type\":\"uint256\"}],\"internalType\":\"struct PythStructs.Price\",\"name\":\"price\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"age\",\"type\":\"uint256\"}],\"name\":\"getEmaPriceNoOlderThan\",\"outputs\":[{\"components\":[{\"internalType\":\"int64\",\"name\":\"price\",\"type\":\"int64\"},{\"internalType\":\"uint64\",\"name\":\"conf\",\"type\":\"uint64\"},{\"internalType\":\"int32\",\"name\":\"expo\",\"type\":\"int32\"},{\"internalType\":\"uint256\",\"name\":\"publishTime\",\"type\":\"uint256\"}],\"internalType\":\"struct PythStructs.Price\",\"name\":\"price\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"getEmaPriceUnsafe\",\"outputs\":[{\"components\":[{\"internalType\":\"int64\",\"name\":\"price\",\"type\":\"int64\"},{\"internalType\":\"uint64\",\"name\":\"conf\",\"type\":\"uint64\"},{\"internalType\":\"int32\",\"name\":\"expo\",\"type\":\"int32\"},{\"internalType\":\"uint256\",\"name\":\"publishTime\",\"type\":\"uint256\"}],\"internalType\":\"struct PythStructs.Price\",\"name\":\"price\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"getPrice\",\"outputs\":[{\"components\":[{\"internalType\":\"int64\",\"name\":\"price\",\"type\":\"int64\"},{\"internalType\":\"uint64\",\"name\":\"conf\",\"type\":\"uint64\"},{\"internalType\":\"int32\",\"name\":\"expo\",\"type\":\"int32\"},{\"internalType\":\"uint256\",\"name\":\"publishTime\",\"type\":\"uint256\"}],\"internalType\":\"struct PythStructs.Price\",\"name\":\"price\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"age\",\"type\":\"uint256\"}],\"name\":\"getPriceNoOlderThan\",\"outputs\":[{\"components\":[{\"internalType\":\"int64\",\"name\":\"price\",\"type\":\"int64\"},{\"internalType\":\"uint64\",\"name\":\"conf\",\"type\":\"uint64\"},{\"internalType\":\"int32\",\"name\":\"expo\",\"type\":\"int32\"},{\"internalType\":\"uint256\",\"name\":\"publishTime\",\"type\":\"uint256\"}],\"internalType\":\"struct PythStructs.Price\",\"name\":\"price\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"getPriceUnsafe\",\"outputs\":[{\"components\":[{\"internalType\":\"int64\",\"name\":\"price\",\"type\":\"int64\"},{\"internalType\":\"uint64\",\"name\":\"conf\",\"type\":\"uint64\"},{\"internalType\":\"int32\",\"name\":\"expo\",\"type\":\"int32\"},{\"internalType\":\"uint256\",\"name\":\"publishTime\",\"type\":\"uint256\"}],\"internalType\":\"struct PythStructs.Price\",\"name\":\"price\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"updateData\",\"type\":\"bytes[]\"}],\"name\":\"getUpdateFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getValidTimePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"validTimePeriod\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"updateData\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"priceIds\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint64\",\"name\":\"minPublishTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"maxPublishTime\",\"type\":\"uint64\"}],\"name\":\"parsePriceFeedUpdates\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"int64\",\"name\":\"price\",\"type\":\"int64\"},{\"internalType\":\"uint64\",\"name\":\"conf\",\"type\":\"uint64\"},{\"internalType\":\"int32\",\"name\":\"expo\",\"type\":\"int32\"},{\"internalType\":\"uint256\",\"name\":\"publishTime\",\"type\":\"uint256\"}],\"internalType\":\"struct PythStructs.Price\",\"name\":\"price\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"int64\",\"name\":\"price\",\"type\":\"int64\"},{\"internalType\":\"uint64\",\"name\":\"conf\",\"type\":\"uint64\"},{\"internalType\":\"int32\",\"name\":\"expo\",\"type\":\"int32\"},{\"internalType\":\"uint256\",\"name\":\"publishTime\",\"type\":\"uint256\"}],\"internalType\":\"struct PythStructs.Price\",\"name\":\"emaPrice\",\"type\":\"tuple\"}],\"internalType\":\"struct PythStructs.PriceFeed[]\",\"name\":\"priceFeeds\",\"type\":\"tuple[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"updateData\",\"type\":\"bytes[]\"}],\"name\":\"updatePriceFeeds\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"updateData\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"priceIds\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint64[]\",\"name\":\"publishTimes\",\"type\":\"uint64[]\"}],\"name\":\"updatePriceFeedsIfNecessary\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Pyth Data Association\",\"details\":\"Please refer to the guidance at https://docs.pyth.network/consumers/best-practices for how to consume prices safely.\",\"events\":{\"BatchPriceFeedUpdate(uint16,uint64)\":{\"details\":\"Emitted when a batch price update is processed successfully.\",\"params\":{\"chainId\":\"ID of the source chain that the batch price update comes from.\",\"sequenceNumber\":\"Sequence number of the batch price update.\"}},\"PriceFeedUpdate(bytes32,uint64,int64,uint64)\":{\"details\":\"Emitted when the price feed with `id` has received a fresh update.\",\"params\":{\"conf\":\"Confidence interval of the given price update.\",\"id\":\"The Pyth Price Feed ID.\",\"price\":\"Price of the given price update.\",\"publishTime\":\"Publish time of the given price update.\"}}},\"kind\":\"dev\",\"methods\":{\"getEmaPrice(bytes32)\":{\"details\":\"Reverts if the EMA price is not available.\",\"params\":{\"id\":\"The Pyth Price Feed ID of which to fetch the EMA price and confidence interval.\"},\"returns\":{\"price\":\"- please read the documentation of PythStructs.Price to understand how to use this safely.\"}},\"getEmaPriceNoOlderThan(bytes32,uint256)\":{\"details\":\"This function is a sanity-checked version of `getEmaPriceUnsafe` which is useful in applications that require a sufficiently-recent price. Reverts if the price wasn't updated sufficiently recently.\",\"returns\":{\"price\":\"- please read the documentation of PythStructs.Price to understand how to use this safely.\"}},\"getEmaPriceUnsafe(bytes32)\":{\"details\":\"This function returns the same price as `getEmaPrice` in the case where the price is available. However, if the price is not recent this function returns the latest available price. The returned price can be from arbitrarily far in the past; this function makes no guarantees that the returned price is recent or useful for any particular application. Users of this function should check the `publishTime` in the price to ensure that the returned price is sufficiently recent for their application. If you are considering using this function, it may be safer / easier to use either `getEmaPrice` or `getEmaPriceNoOlderThan`.\",\"returns\":{\"price\":\"- please read the documentation of PythStructs.Price to understand how to use this safely.\"}},\"getPrice(bytes32)\":{\"details\":\"Reverts if the price has not been updated within the last `getValidTimePeriod()` seconds.\",\"params\":{\"id\":\"The Pyth Price Feed ID of which to fetch the price and confidence interval.\"},\"returns\":{\"price\":\"- please read the documentation of PythStructs.Price to understand how to use this safely.\"}},\"getPriceNoOlderThan(bytes32,uint256)\":{\"details\":\"This function is a sanity-checked version of `getPriceUnsafe` which is useful in applications that require a sufficiently-recent price. Reverts if the price wasn't updated sufficiently recently.\",\"returns\":{\"price\":\"- please read the documentation of PythStructs.Price to understand how to use this safely.\"}},\"getPriceUnsafe(bytes32)\":{\"details\":\"This function returns the most recent price update in this contract without any recency checks. This function is unsafe as the returned price update may be arbitrarily far in the past. Users of this function should check the `publishTime` in the price to ensure that the returned price is sufficiently recent for their application. If you are considering using this function, it may be safer / easier to use either `getPrice` or `getPriceNoOlderThan`.\",\"returns\":{\"price\":\"- please read the documentation of PythStructs.Price to understand how to use this safely.\"}},\"getUpdateFee(bytes[])\":{\"params\":{\"updateData\":\"Array of price update data.\"},\"returns\":{\"feeAmount\":\"The required fee in Wei.\"}},\"parsePriceFeedUpdates(bytes[],bytes32[],uint64,uint64)\":{\"details\":\"Reverts if the transferred fee is not sufficient or the updateData is invalid or there is no update for any of the given `priceIds` within the given time range.\",\"params\":{\"maxPublishTime\":\"maximum acceptable publishTime for the given `priceIds`.\",\"minPublishTime\":\"minimum acceptable publishTime for the given `priceIds`.\",\"priceIds\":\"Array of price ids.\",\"updateData\":\"Array of price update data.\"},\"returns\":{\"priceFeeds\":\"Array of the price feeds corresponding to the given `priceIds` (with the same order).\"}},\"updatePriceFeeds(bytes[])\":{\"details\":\"Reverts if the transferred fee is not sufficient or the updateData is invalid.\",\"params\":{\"updateData\":\"Array of price update data.\"}},\"updatePriceFeedsIfNecessary(bytes[],bytes32[],uint64[])\":{\"details\":\"Reverts if update is not needed or the transferred fee is not sufficient or the updateData is invalid.\",\"params\":{\"priceIds\":\"Array of price ids.\",\"publishTimes\":\"Array of publishTimes. `publishTimes[i]` corresponds to known `publishTime` of `priceIds[i]`\",\"updateData\":\"Array of price update data.\"}}},\"title\":\"Consume prices from the Pyth Network (https://pyth.network/).\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getEmaPrice(bytes32)\":{\"notice\":\"Returns the exponentially-weighted moving average price and confidence interval.\"},\"getEmaPriceNoOlderThan(bytes32,uint256)\":{\"notice\":\"Returns the exponentially-weighted moving average price that is no older than `age` seconds of the current time.\"},\"getEmaPriceUnsafe(bytes32)\":{\"notice\":\"Returns the exponentially-weighted moving average price of a price feed without any sanity checks.\"},\"getPrice(bytes32)\":{\"notice\":\"Returns the price and confidence interval.\"},\"getPriceNoOlderThan(bytes32,uint256)\":{\"notice\":\"Returns the price that is no older than `age` seconds of the current time.\"},\"getPriceUnsafe(bytes32)\":{\"notice\":\"Returns the price of a price feed without any sanity checks.\"},\"getUpdateFee(bytes[])\":{\"notice\":\"Returns the required fee to update an array of price updates.\"},\"getValidTimePeriod()\":{\"notice\":\"Returns the period (in seconds) that a price feed is considered valid since its publish time\"},\"parsePriceFeedUpdates(bytes[],bytes32[],uint64,uint64)\":{\"notice\":\"Parse `updateData` and return price feeds of the given `priceIds` if they are all published within `minPublishTime` and `maxPublishTime`. You can use this method if you want to use a Pyth price at a fixed time and not the most recent price; otherwise, please consider using `updatePriceFeeds`. This method does not store the price updates on-chain. This method requires the caller to pay a fee in wei; the required fee can be computed by calling `getUpdateFee` with the length of the `updateData` array.\"},\"updatePriceFeeds(bytes[])\":{\"notice\":\"Update price feeds with given update messages. This method requires the caller to pay a fee in wei; the required fee can be computed by calling `getUpdateFee` with the length of the `updateData` array. Prices will be updated if they are more recent than the current stored prices. The call will succeed even if the update is not the most recent.\"},\"updatePriceFeedsIfNecessary(bytes[],bytes32[],uint64[])\":{\"notice\":\"Wrapper around updatePriceFeeds that rejects fast if a price update is not necessary. A price update is necessary if the current on-chain publishTime is older than the given publishTime. It relies solely on the given `publishTimes` for the price feeds and does not read the actual price update publish time within `updateData`. This method requires the caller to pay a fee in wei; the required fee can be computed by calling `getUpdateFee` with the length of the `updateData` array. `priceIds` and `publishTimes` are two arrays with the same size that correspond to senders known publishTime of each priceId when calling this method. If all of price feeds within `priceIds` have updated and have a newer or equal publish time than the given publish time, it will reject the transaction to save gas. Otherwise, it calls updatePriceFeeds method to update the prices.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@pythnetwork/pyth-sdk-solidity/IPyth.sol\":\"IPyth\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@pythnetwork/pyth-sdk-solidity/IPyth.sol\":{\"keccak256\":\"0x949c65c65fea0578c09a6fc068e09ed1165adede2c835984cefcb25d76de1de2\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://4d7cb071e08e81bb8b113a928f4c2d2b3cdf950ad64c6c7003ea3d874163ca77\",\"dweb:/ipfs/QmRbQchPxRTBMHi7WzLb8XnMGzPDQcWhu7i2u5naUsCRoZ\"]},\"@pythnetwork/pyth-sdk-solidity/IPythEvents.sol\":{\"keccak256\":\"0x048a35526c2e77d107d43ba336f1dcf31f64cef25ba429ae1f7a0fbc11c23320\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://b75be4c3643b22305995aba71fc92146dbf51fa82d2f9728c515d7749b32dca3\",\"dweb:/ipfs/QmRby4XA9jJQGhxoJ16BTUDuU7BzLFfadbfTgBiQsDgNyZ\"]},\"@pythnetwork/pyth-sdk-solidity/PythStructs.sol\":{\"keccak256\":\"0x95ff0a6d64517348ef604b8bcf246b561a9445d7e607b8f48491c617cfda9b65\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://fb7f4ffe03be7379d3833c5946e38153de26aef4a4da0323a1ec603787de9eb7\",\"dweb:/ipfs/QmW4WkkLPGjDJrLrW4mYfxtFh8e9KAcPhrnNdxPQsfkS6t\"]}},\"version\":1}","evm":{"legacyAssembly":null,"assembly":null,"bytecode":null,"methodIdentifiers":{"getEmaPrice(bytes32)":"b5dcc911","getEmaPriceNoOlderThan(bytes32,uint256)":"711a2e28","getEmaPriceUnsafe(bytes32)":"9474f45b","getPrice(bytes32)":"31d98b3f","getPriceNoOlderThan(bytes32,uint256)":"a4ae35e0","getPriceUnsafe(bytes32)":"96834ad3","getUpdateFee(bytes[])":"d47eed45","getValidTimePeriod()":"e18910a3","parsePriceFeedUpdates(bytes[],bytes32[],uint64,uint64)":"4716e9c5","updatePriceFeeds(bytes[])":"ef9e5e28","updatePriceFeedsIfNecessary(bytes[],bytes32[],uint64[])":"b9256d28"}},"irOptimized":""}},"@pythnetwork/pyth-sdk-solidity/IPythEvents.sol":{"IPythEvents":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint16","name":"chainId","type":"uint16"},{"indexed":false,"internalType":"uint64","name":"sequenceNumber","type":"uint64"}],"name":"BatchPriceFeedUpdate","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"id","type":"bytes32"},{"indexed":false,"internalType":"uint64","name":"publishTime","type":"uint64"},{"indexed":false,"internalType":"int64","name":"price","type":"int64"},{"indexed":false,"internalType":"uint64","name":"conf","type":"uint64"}],"name":"PriceFeedUpdate","type":"event"}],"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"sequenceNumber\",\"type\":\"uint64\"}],\"name\":\"BatchPriceFeedUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"publishTime\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"int64\",\"name\":\"price\",\"type\":\"int64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"conf\",\"type\":\"uint64\"}],\"name\":\"PriceFeedUpdate\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"This interface can be used for listening to the updates for off-chain and testing purposes.\",\"events\":{\"BatchPriceFeedUpdate(uint16,uint64)\":{\"details\":\"Emitted when a batch price update is processed successfully.\",\"params\":{\"chainId\":\"ID of the source chain that the batch price update comes from.\",\"sequenceNumber\":\"Sequence number of the batch price update.\"}},\"PriceFeedUpdate(bytes32,uint64,int64,uint64)\":{\"details\":\"Emitted when the price feed with `id` has received a fresh update.\",\"params\":{\"conf\":\"Confidence interval of the given price update.\",\"id\":\"The Pyth Price Feed ID.\",\"price\":\"Price of the given price update.\",\"publishTime\":\"Publish time of the given price update.\"}}},\"kind\":\"dev\",\"methods\":{},\"title\":\"IPythEvents contains the events that Pyth contract emits.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@pythnetwork/pyth-sdk-solidity/IPythEvents.sol\":\"IPythEvents\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@pythnetwork/pyth-sdk-solidity/IPythEvents.sol\":{\"keccak256\":\"0x048a35526c2e77d107d43ba336f1dcf31f64cef25ba429ae1f7a0fbc11c23320\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://b75be4c3643b22305995aba71fc92146dbf51fa82d2f9728c515d7749b32dca3\",\"dweb:/ipfs/QmRby4XA9jJQGhxoJ16BTUDuU7BzLFfadbfTgBiQsDgNyZ\"]}},\"version\":1}","evm":{"legacyAssembly":null,"assembly":null,"bytecode":null,"methodIdentifiers":{}},"irOptimized":""}},"@pythnetwork/pyth-sdk-solidity/PythStructs.sol":{"PythStructs":{"abi":[],"metadata":{"optimizer_settings":"M3B3","solc_metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@pythnetwork/pyth-sdk-solidity/PythStructs.sol\":\"PythStructs\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@pythnetwork/pyth-sdk-solidity/PythStructs.sol\":{\"keccak256\":\"0x95ff0a6d64517348ef604b8bcf246b561a9445d7e607b8f48491c617cfda9b65\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://fb7f4ffe03be7379d3833c5946e38153de26aef4a4da0323a1ec603787de9eb7\",\"dweb:/ipfs/QmW4WkkLPGjDJrLrW4mYfxtFh8e9KAcPhrnNdxPQsfkS6t\"]}},\"version\":1}","zk_version":"1.3.10"},"evm":{"legacyAssembly":null,"assembly":"\t.text\n\t.file\t\"PythStructs.sol:PythStructs\"\n\t.globl\t__entry\n__entry:\n.func_begin0:\n\tand!\t1, r2, r1\n\tjump.eq\t@.BB0_2\n\tadd\t128, r0, r1\n\tst.1\t64, r1\n\tcontext.get_context_u128\tr1\n\tsub.s!\t0, r1, r1\n\tjump.ne\t@.BB0_2\n\tadd\t32, r0, r1\n\tst.2\t256, r1\n\tst.2\t288, r0\n\tadd\t@CPI0_0[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_2:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end0:\n\n\t.note.GNU-stack\n\t.rodata\nCPI0_0:\n\t.cell 53919893334301279589334030174039261352344891250716429051063678533632\n","bytecode":{"object":"00000001012001900000000c0000613d0000008001000039000000400010043f0000000001000416000000000110004c0000000c0000c13d00000020010000390000010000100443000001200000044300000005010000410000000f0001042e000000000100001900000010000104300000000e000004320000000f0001042e00000010000104300000000000000000000000000000000000000000000000000000000200000000000000000000000000000040000001000000000000000000f9f6ed219b957213891c2bb3c9b35d0aa633fd5c0bb1e2cb57de6539efdec553"},"methodIdentifiers":{}},"irOptimized":"/// @use-src 2:\"@pythnetwork/pyth-sdk-solidity/PythStructs.sol\"\nobject \"PythStructs_161\" {\n    code {\n        {\n            /// @src 2:64:1151  \"contract PythStructs {...\"\n            let _1 := memoryguard(0x80)\n            mstore(64, _1)\n            if callvalue() { revert(0, 0) }\n            let _2 := datasize(\"PythStructs_161_deployed\")\n            codecopy(_1, dataoffset(\"PythStructs_161_deployed\"), _2)\n            return(_1, _2)\n        }\n    }\n    /// @use-src 2:\"@pythnetwork/pyth-sdk-solidity/PythStructs.sol\"\n    object \"PythStructs_161_deployed\" {\n        code {\n            {\n                /// @src 2:64:1151  \"contract PythStructs {...\"\n                revert(0, 0)\n            }\n        }\n        data \".metadata\" hex\"a2646970667358221220eb994c6c631c4d3dec97417f3078489527275da6ce5c028168cef0f46d9813af64736f6c63430008120033\"\n    }\n}\n","hash":"01000007d587861d6d9c2d88f2aa64e9d64cdabae29b4a14e3ef031b114e3fd0","factoryDependencies":{}}},"contracts/Ownable.sol":{"Ownable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/Ownable.sol\":{\"keccak256\":\"0xc82402a70f97b7710330f5ea7c46217e33912c4127752a1145f3814631e3de49\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://320803d791e444e6d2f1868c1dd06b7c79c84c5e770675a14a1b379cee6000ea\",\"dweb:/ipfs/QmXFXsNmDt9EusQEfcx4XwNGz6emtkHy7KQKKqGPMmjgNo\"]}},\"version\":1}","evm":{"legacyAssembly":null,"assembly":null,"bytecode":null,"methodIdentifiers":{"owner()":"8da5cb5b","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b"}},"irOptimized":""}},"contracts/compound/EIP20Interface.sol":{"EIP20Interface":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"remaining","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"dst","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"src","type":"address"},{"internalType":"address","name":"dst","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"params\":{\"owner\":\"The address of the account which owns the tokens to be spent\",\"spender\":\"The address of the account which may transfer tokens\"},\"returns\":{\"remaining\":\"The number of tokens allowed to be spent (-1 means infinite)\"}},\"approve(address,uint256)\":{\"details\":\"This will overwrite the approval amount for `spender`  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\",\"params\":{\"amount\":\"The number of tokens that are approved (-1 means infinite)\",\"spender\":\"The address of the account which may transfer tokens\"},\"returns\":{\"success\":\"Whether or not the approval succeeded\"}},\"balanceOf(address)\":{\"params\":{\"owner\":\"The address from which the balance will be retrieved\"},\"returns\":{\"balance\":\"The balance\"}},\"totalSupply()\":{\"returns\":{\"_0\":\"The supply of tokens\"}},\"transfer(address,uint256)\":{\"params\":{\"amount\":\"The number of tokens to transfer\",\"dst\":\"The address of the destination account\"},\"returns\":{\"success\":\"Whether or not the transfer succeeded\"}},\"transferFrom(address,address,uint256)\":{\"params\":{\"amount\":\"The number of tokens to transfer\",\"dst\":\"The address of the destination account\",\"src\":\"The address of the source account\"},\"returns\":{\"success\":\"Whether or not the transfer succeeded\"}}},\"title\":\"ERC 20 Token Standard Interface  https://eips.ethereum.org/EIPS/eip-20\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"allowance(address,address)\":{\"notice\":\"Get the current allowance from `owner` for `spender`\"},\"approve(address,uint256)\":{\"notice\":\"Approve `spender` to transfer up to `amount` from `src`\"},\"balanceOf(address)\":{\"notice\":\"Gets the balance of the specified address\"},\"totalSupply()\":{\"notice\":\"Get the total number of tokens in circulation\"},\"transfer(address,uint256)\":{\"notice\":\"Transfer `amount` tokens from `msg.sender` to `dst`\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Transfer `amount` tokens from `src` to `dst`\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/compound/EIP20Interface.sol\":\"EIP20Interface\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/compound/EIP20Interface.sol\":{\"keccak256\":\"0xebdb703a3ab9bd68f3ee5cbe54394006b89a6369421976ad0e84b09a8b93cf75\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d762e6eca915cdf86177a63b27faf80ef32c65d61e69a64526572e74bc890158\",\"dweb:/ipfs/QmS4VJ7uZuyXCdv4qYaFFUbxo8C2RKmVtD4QvHnnDFetmK\"]}},\"version\":1}","evm":{"legacyAssembly":null,"assembly":null,"bytecode":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","decimals()":"313ce567","name()":"06fdde03","symbol()":"95d89b41","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"irOptimized":""}},"contracts/oracle/PythAdaptor.sol":{"PythAdaptor":{"abi":[{"inputs":[{"internalType":"address","name":"_pythMain","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[{"internalType":"address","name":"cToken","type":"address"}],"name":"getUnderlyingPrice","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pythMain","outputs":[{"internalType":"contract IPyth","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"tokens","type":"address[]"},{"internalType":"bytes32[]","name":"feeds","type":"bytes32[]"}],"name":"setTokenFeeds","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"tokenFeeds","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"metadata":{"optimizer_settings":"M3B3","solc_metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pythMain\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"getUnderlyingPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pythMain\",\"outputs\":[{\"internalType\":\"contract IPyth\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"feeds\",\"type\":\"bytes32[]\"}],\"name\":\"setTokenFeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenFeeds\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/oracle/PythAdaptor.sol\":\"PythAdaptor\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@pythnetwork/pyth-sdk-solidity/IPyth.sol\":{\"keccak256\":\"0x949c65c65fea0578c09a6fc068e09ed1165adede2c835984cefcb25d76de1de2\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://4d7cb071e08e81bb8b113a928f4c2d2b3cdf950ad64c6c7003ea3d874163ca77\",\"dweb:/ipfs/QmRbQchPxRTBMHi7WzLb8XnMGzPDQcWhu7i2u5naUsCRoZ\"]},\"@pythnetwork/pyth-sdk-solidity/IPythEvents.sol\":{\"keccak256\":\"0x048a35526c2e77d107d43ba336f1dcf31f64cef25ba429ae1f7a0fbc11c23320\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://b75be4c3643b22305995aba71fc92146dbf51fa82d2f9728c515d7749b32dca3\",\"dweb:/ipfs/QmRby4XA9jJQGhxoJ16BTUDuU7BzLFfadbfTgBiQsDgNyZ\"]},\"@pythnetwork/pyth-sdk-solidity/PythStructs.sol\":{\"keccak256\":\"0x95ff0a6d64517348ef604b8bcf246b561a9445d7e607b8f48491c617cfda9b65\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://fb7f4ffe03be7379d3833c5946e38153de26aef4a4da0323a1ec603787de9eb7\",\"dweb:/ipfs/QmW4WkkLPGjDJrLrW4mYfxtFh8e9KAcPhrnNdxPQsfkS6t\"]},\"contracts/Ownable.sol\":{\"keccak256\":\"0xc82402a70f97b7710330f5ea7c46217e33912c4127752a1145f3814631e3de49\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://320803d791e444e6d2f1868c1dd06b7c79c84c5e770675a14a1b379cee6000ea\",\"dweb:/ipfs/QmXFXsNmDt9EusQEfcx4XwNGz6emtkHy7KQKKqGPMmjgNo\"]},\"contracts/compound/EIP20Interface.sol\":{\"keccak256\":\"0xebdb703a3ab9bd68f3ee5cbe54394006b89a6369421976ad0e84b09a8b93cf75\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d762e6eca915cdf86177a63b27faf80ef32c65d61e69a64526572e74bc890158\",\"dweb:/ipfs/QmS4VJ7uZuyXCdv4qYaFFUbxo8C2RKmVtD4QvHnnDFetmK\"]},\"contracts/oracle/PythAdaptor.sol\":{\"keccak256\":\"0x842aed74e7c94085712bc7ac28a56f84e1b0e048f6f286cdecce78d466ee870f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://896c8ba3d6b611f37aa6cb048e85251493614fd0f5c72f202a2da105570516e8\",\"dweb:/ipfs/QmbRmAJo3Bxq1mps5EBtWqxbDS2PP3uYYoUfQJcWHWSK45\"]}},\"version\":1}","zk_version":"1.3.10"},"evm":{"legacyAssembly":null,"assembly":"\t.text\n\t.file\t\"PythAdaptor.sol:PythAdaptor\"\n\t.globl\t__entry\n__entry:\n.func_begin0:\n\tnop\tstack+=[7]\n\tptr.add\tr1, r0, stack[@ptr_calldata]\n\tshr.s\t96, r1, r1\n\tand\t@CPI0_0[0], r1, stack[@calldatasize]\n\tadd\t0, r0, stack[@returndatasize]\n\tand!\t1, r2, r1\n\tjump.ne\t@.BB0_1\n\tadd\t128, r0, r1\n\tst.1\t64, r1\n\tadd\tstack[@calldatasize], r0, r1\n\tsub.s!\t4, r1, r1\n\tjump.lt\t@.BB0_2\n\tptr.add\tstack[@ptr_calldata], r0, r1\n\tld\tr1, r1\n\tshr.s\t224, r1, r1\n\tsub.s!\t@CPI0_8[0], r1, r2\n\tjump.le\t@.BB0_15\n\tsub.s!\t@CPI0_9[0], r1, r2\n\tjump.gt\t@.BB0_21\n\tsub.s!\t@CPI0_12[0], r1, r2\n\tjump.eq\t@.BB0_35\n\tsub.s!\t@CPI0_13[0], r1, r1\n\tjump.ne\t@.BB0_2\n\tcontext.get_context_u128\tr1\n\tsub.s!\t0, r1, r1\n\tjump.ne\t@.BB0_2\n\tadd\tstack[@calldatasize], r0, r1\n\tsub.s\t4, r1, r2\n\tadd\t@CPI0_2[0], r0, r3\n\tsub.s!\t64, r2, r4\n\tadd\t0, r0, r4\n\tadd.lt\tr3, r0, r4\n\tand\t@CPI0_2[0], r2, r2\n\tsub.s!\t0, r2, r5\n\tadd.le\t0, r0, r3\n\tsub.s!\t@CPI0_2[0], r2, r2\n\tadd\tr4, r0, r2\n\tadd.eq\tr3, r0, r2\n\tsub.s!\t0, r2, r2\n\tjump.ne\t@.BB0_2\n\tptr.add\tstack[@ptr_calldata], r0, r2\n\tptr.add.s\t4, r2, r3\n\tld\tr3, r3\n\tsub.s!\t@CPI0_19[0], r3, r4\n\tjump.gt\t@.BB0_2\n\tadd\t35, r3, r4\n\tadd\t@CPI0_2[0], r0, r5\n\tsub!\tr4, r1, r6\n\tadd\t0, r0, r6\n\tadd.ge\tr5, r0, r6\n\tand\t@CPI0_2[0], r1, r7\n\tand\t@CPI0_2[0], r4, r4\n\tsub!\tr4, r7, r8\n\tadd.ge\t0, r0, r5\n\txor\tr4, r7, r4\n\tsub.s!\t@CPI0_2[0], r4, r4\n\tadd\tr6, r0, r4\n\tadd.eq\tr5, r0, r4\n\tsub.s!\t0, r4, r4\n\tjump.ne\t@.BB0_2\n\tadd\t4, r3, r4\n\tptr.add\tr2, r4, r4\n\tld\tr4, r4\n\tadd\tr4, r0, stack-[5]\n\tsub.s!\t@CPI0_19[0], r4, r4\n\tjump.gt\t@.BB0_2\n\tadd\t36, r3, r4\n\tadd\tstack-[5], r0, r3\n\tshl.s\t5, r3, r3\n\tadd\tr4, r0, stack-[4]\n\tadd\tr3, r4, r3\n\tsub!\tr3, r1, r3\n\tjump.gt\t@.BB0_2\n\tptr.add.s\t36, r2, r3\n\tld\tr3, r3\n\tsub.s!\t@CPI0_19[0], r3, r4\n\tjump.gt\t@.BB0_2\n\tadd\t35, r3, r4\n\tadd\t@CPI0_2[0], r0, r5\n\tsub!\tr4, r1, r6\n\tadd\t0, r0, r6\n\tadd.ge\tr5, r0, r6\n\tand\t@CPI0_2[0], r1, r7\n\tand\t@CPI0_2[0], r4, r4\n\tsub!\tr4, r7, r8\n\tadd.ge\t0, r0, r5\n\txor\tr4, r7, r4\n\tsub.s!\t@CPI0_2[0], r4, r4\n\tadd\tr6, r0, r4\n\tadd.eq\tr5, r0, r4\n\tsub.s!\t0, r4, r4\n\tjump.ne\t@.BB0_2\n\tadd\t4, r3, r4\n\tptr.add\tr2, r4, r2\n\tld\tr2, r2\n\tsub.s!\t@CPI0_19[0], r2, r4\n\tjump.gt\t@.BB0_2\n\tadd\t36, r3, r4\n\tshl.s\t5, r2, r3\n\tadd\tr4, r0, stack-[3]\n\tadd\tr3, r4, r3\n\tsub!\tr3, r1, r1\n\tjump.gt\t@.BB0_2\n\tsload\tr0, r1\n\tand\t@CPI0_3[0], r1, r1\n\tcontext.caller\tr3\n\tsub!\tr1, r3, r1\n\tjump.ne\t@.BB0_29\n\tadd\tstack-[5], r0, r1\n\tsub!\tr1, r2, r1\n\tjump.ne\t@.BB0_53\n\tadd\tstack-[5], r0, r1\n\tsub.s!\t0, r1, r1\n\tjump.eq\t@.BB0_55\n\tadd\t2, r0, r1\n\tadd\tr1, r0, stack-[2]\n\tadd\t32784, r0, r1\n\tadd\tr1, r0, stack-[1]\n\tadd\tr0, r0, r2\n.BB0_54:\n\tadd\tr2, r0, stack-[7]\n\tshl.s\t5, r2, r1\n\tadd\tstack-[3], r0, r2\n\tadd\tr1, r2, r2\n\tadd\tstack-[4], r0, r3\n\tadd\tr1, r3, r1\n\tptr.add\tstack[@ptr_calldata], r0, r3\n\tptr.add\tr3, r1, r1\n\tptr.add\tr3, r2, r2\n\tld\tr2, r2\n\tadd\tr2, r0, stack-[6]\n\tld\tr1, r1\n\tsub.s!\t@CPI0_20[0], r1, r2\n\tjump.ge\t@.BB0_2\n\tst.1\t0, r1\n\tadd\tstack-[2], r0, r1\n\tst.1\t32, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.lt\tr2, r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_21[0], r1, r1\n\tadd\tstack-[1], r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tld\tr1, r1\n\tadd\tstack-[6], r0, r2\n\tsstore\tr1, r2\n\tadd\tstack-[7], r0, r2\n\tadd\t1, r2, r2\n\tadd\tstack-[5], r0, r1\n\tsub!\tr2, r1, r1\n\tjump.lt\t@.BB0_54\n.BB0_55:\n\tadd\tr0, r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_1:\n\tcontext.get_context_u128\tr1\n\tsub.s!\t0, r1, r1\n\tjump.ne\t@.BB0_2\n\tadd\tstack[@calldatasize], r0, r1\n\tadd\t159, r1, r2\n\tsub.s\t32, r0, r3\n\tand\tr2, r3, r2\n\tsub.s!\t@CPI0_1[0], r2, r3\n\tjump.lt\t@.BB0_5\n.BB0_4:\n\tadd\t@CPI0_32[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI0_23[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_5:\n\tst.1\t64, r2\n\tand\t31, r1, r2\n\tptr.add\tstack[@ptr_calldata], r0, r3\n\tshr.s!\t5, r1, r4\n\tjump.eq\t@.BB0_143\n\tadd\tr0, r0, r5\n.BB0_7:\n\tshl.s\t5, r5, r6\n\tptr.add\tr3, r6, r7\n\tld\tr7, r7\n\tadd\t128, r6, r6\n\tst.1\tr6, r7\n\tadd\t1, r5, r5\n\tsub!\tr5, r4, r6\n\tjump.lt\t@.BB0_7\n.BB0_143:\n\tsub.s!\t0, r2, r5\n\tjump.eq\t@.BB0_9\n\tshl.s\t5, r4, r4\n\tptr.add\tr3, r4, r3\n\tshl.s\t3, r2, r2\n\tadd\t128, r4, r4\n\tld.1\tr4, r5\n\tshl\tr5, r2, r5\n\tshr\tr5, r2, r5\n\tld\tr3, r3\n\tsub\t256, r2, r2\n\tshr\tr3, r2, r3\n\tshl\tr3, r2, r2\n\tor\tr2, r5, r2\n\tst.1\tr4, r2\n.BB0_9:\n\tadd\t@CPI0_2[0], r0, r2\n\tsub.s!\t32, r1, r3\n\tadd\t0, r0, r3\n\tadd.lt\tr2, r0, r3\n\tand\t@CPI0_2[0], r1, r1\n\tsub.s!\t0, r1, r4\n\tadd.le\t0, r0, r2\n\tsub.s!\t@CPI0_2[0], r1, r1\n\tadd\tr3, r0, r1\n\tadd.eq\tr2, r0, r1\n\tsub.s!\t0, r1, r1\n\tjump.ne\t@.BB0_2\n\tld.1\t128, r3\n\tsub.s!\t@CPI0_3[0], r3, r1\n\tjump.gt\t@.BB0_2\n\tsload\tr0, r1\n\tand\t@CPI0_4[0], r1, r1\n\tcontext.caller\tr6\n\tor\tr1, r6, r1\n\tsstore\tr0, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tadd\tr3, r0, stack-[7]\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.lt\tr2, r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_5[0], r1, r1\n\tadd\t32781, r0, r2\n\tadd\t3, r0, r3\n\tadd\t@CPI0_6[0], r0, r4\n\tadd\tr0, r0, r5\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tadd\tstack-[7], r0, r3\n\tand!\t1, r2, r1\n\tjump.eq\t@.BB0_2\n\tadd\t1, r0, r1\n\tsload\tr1, r2\n\tand\t@CPI0_4[0], r2, r2\n\tor\tr2, r3, r2\n\tsstore\tr1, r2\n\tadd\t32, r0, r1\n\tst.2\t256, r1\n\tst.2\t288, r0\n\tadd\t@CPI0_7[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_15:\n\tsub.s!\t@CPI0_14[0], r1, r2\n\tjump.eq\t@.BB0_23\n\tsub.s!\t@CPI0_15[0], r1, r2\n\tjump.eq\t@.BB0_26\n\tsub.s!\t@CPI0_16[0], r1, r1\n\tjump.ne\t@.BB0_2\n\tcontext.get_context_u128\tr1\n\tsub.s!\t0, r1, r1\n\tjump.ne\t@.BB0_2\n\tsub.s\t4, r0, r1\n\tadd\tstack[@calldatasize], r1, r1\n\tadd\t@CPI0_2[0], r0, r2\n\tsub.s!\t0, r1, r3\n\tadd\t0, r0, r3\n\tadd.lt\tr2, r0, r3\n\tand\t@CPI0_2[0], r1, r1\n\tsub.s!\t0, r1, r4\n\tadd.le\t0, r0, r2\n\tsub.s!\t@CPI0_2[0], r1, r1\n\tadd\tr3, r0, r1\n\tadd.eq\tr2, r0, r1\n\tsub.s!\t0, r1, r1\n\tjump.ne\t@.BB0_2\n\tsload\tr0, r1\n\tand\t@CPI0_3[0], r1, r1\n\tld.1\t64, r2\n\tst.1\tr2, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.lt\tr2, r0, r1\n\tshl.s\t64, r1, r1\n\tor\t@CPI0_34[0], r1, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_21:\n\tsub.s!\t@CPI0_10[0], r1, r2\n\tjump.eq\t@.BB0_58\n\tsub.s!\t@CPI0_11[0], r1, r1\n\tjump.ne\t@.BB0_2\n\tcontext.get_context_u128\tr1\n\tsub.s!\t0, r1, r1\n\tjump.ne\t@.BB0_2\n\tsub.s\t4, r0, r1\n\tadd\tstack[@calldatasize], r1, r1\n\tadd\t@CPI0_2[0], r0, r2\n\tsub.s!\t32, r1, r3\n\tadd\t0, r0, r3\n\tadd.lt\tr2, r0, r3\n\tand\t@CPI0_2[0], r1, r1\n\tsub.s!\t0, r1, r4\n\tadd.le\t0, r0, r2\n\tsub.s!\t@CPI0_2[0], r1, r1\n\tadd\tr3, r0, r1\n\tadd.eq\tr2, r0, r1\n\tsub.s!\t0, r1, r1\n\tjump.ne\t@.BB0_2\n\tadd\t4, r0, r1\n\tptr.add\tstack[@ptr_calldata], r1, r1\n\tld\tr1, r1\n\tand\t@CPI0_3[0], r1, r2\n\tsub.s!\t@CPI0_3[0], r1, r1\n\tjump.gt\t@.BB0_2\n\tld.1\t64, r10\n\tadd\t@CPI0_17[0], r0, r1\n\tst.1\tr10, r1\n\tcontext.gas_left\tr1\n\tsub.s!\t4, r2, r3\n\tjump.ne\t@.BB0_71\n\tadd\tstack[@returndatasize], r0, r3\n\tsub.s!\t32, r3, r1\n\tadd\t32, r0, r4\n\tadd.lt\tr3, r0, r4\n\tjump\t@.BB0_81\n.BB0_35:\n\tcontext.get_context_u128\tr1\n\tsub.s!\t0, r1, r1\n\tjump.ne\t@.BB0_2\n\tsub.s\t4, r0, r1\n\tadd\tstack[@calldatasize], r1, r1\n\tadd\t@CPI0_2[0], r0, r2\n\tsub.s!\t32, r1, r3\n\tadd\t0, r0, r3\n\tadd.lt\tr2, r0, r3\n\tand\t@CPI0_2[0], r1, r1\n\tsub.s!\t0, r1, r4\n\tadd.le\t0, r0, r2\n\tsub.s!\t@CPI0_2[0], r1, r1\n\tadd\tr3, r0, r1\n\tadd.eq\tr2, r0, r1\n\tsub.s!\t0, r1, r1\n\tjump.ne\t@.BB0_2\n\tadd\t4, r0, r1\n\tptr.add\tstack[@ptr_calldata], r1, r1\n\tld\tr1, r1\n\tsub.s!\t@CPI0_3[0], r1, r2\n\tjump.gt\t@.BB0_2\n\tst.1\t0, r1\n\tadd\t2, r0, r1\n\tst.1\t32, r1\n\tadd\tr0, r0, r1\n\tnear_call\tr0, @__keccak256, @DEFAULT_UNWIND\n\tsload\tr1, r1\n\tld.1\t64, r2\n\tst.1\tr2, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.lt\tr2, r0, r1\n\tshl.s\t64, r1, r1\n\tor\t@CPI0_34[0], r1, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_23:\n\tcontext.get_context_u128\tr1\n\tsub.s!\t0, r1, r1\n\tjump.ne\t@.BB0_2\n\tsub.s\t4, r0, r1\n\tadd\tstack[@calldatasize], r1, r1\n\tadd\t@CPI0_2[0], r0, r2\n\tsub.s!\t0, r1, r3\n\tadd\t0, r0, r3\n\tadd.lt\tr2, r0, r3\n\tand\t@CPI0_2[0], r1, r1\n\tsub.s!\t0, r1, r4\n\tadd.le\t0, r0, r2\n\tsub.s!\t@CPI0_2[0], r1, r1\n\tadd\tr3, r0, r1\n\tadd.eq\tr2, r0, r1\n\tsub.s!\t0, r1, r1\n\tjump.ne\t@.BB0_2\n\tadd\t1, r0, r1\n\tsload\tr1, r1\n\tand\t@CPI0_3[0], r1, r1\n\tst.1\t128, r1\n\tadd\t@CPI0_42[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_26:\n\tcontext.get_context_u128\tr1\n\tsub.s!\t0, r1, r1\n\tjump.ne\t@.BB0_2\n\tsub.s\t4, r0, r1\n\tadd\tstack[@calldatasize], r1, r1\n\tadd\t@CPI0_2[0], r0, r2\n\tsub.s!\t0, r1, r3\n\tadd\t0, r0, r3\n\tadd.lt\tr2, r0, r3\n\tand\t@CPI0_2[0], r1, r1\n\tsub.s!\t0, r1, r4\n\tadd.le\t0, r0, r2\n\tsub.s!\t@CPI0_2[0], r1, r1\n\tadd\tr3, r0, r1\n\tadd.eq\tr2, r0, r1\n\tsub.s!\t0, r1, r1\n\tjump.ne\t@.BB0_2\n\tsload\tr0, r2\n\tand\t@CPI0_3[0], r2, r1\n\tcontext.caller\tr5\n\tsub!\tr1, r5, r1\n\tjump.ne\t@.BB0_29\n\tadd\tr2, r0, stack-[7]\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.lt\tr2, r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_5[0], r1, r1\n\tadd\t32781, r0, r2\n\tadd\t3, r0, r3\n\tadd\t@CPI0_6[0], r0, r4\n\tadd\tr0, r0, r6\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r1\n\tjump.eq\t@.BB0_2\n\tadd\tstack-[7], r0, r1\n\tand\t@CPI0_4[0], r1, r1\n\tsstore\tr0, r1\n\tadd\tr0, r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_58:\n\tcontext.get_context_u128\tr1\n\tsub.s!\t0, r1, r1\n\tjump.ne\t@.BB0_2\n\tsub.s\t4, r0, r1\n\tadd\tstack[@calldatasize], r1, r1\n\tadd\t@CPI0_2[0], r0, r2\n\tsub.s!\t32, r1, r3\n\tadd\t0, r0, r3\n\tadd.lt\tr2, r0, r3\n\tand\t@CPI0_2[0], r1, r1\n\tsub.s!\t0, r1, r4\n\tadd.le\t0, r0, r2\n\tsub.s!\t@CPI0_2[0], r1, r1\n\tadd\tr3, r0, r1\n\tadd.eq\tr2, r0, r1\n\tsub.s!\t0, r1, r1\n\tjump.ne\t@.BB0_2\n\tadd\t4, r0, r1\n\tptr.add\tstack[@ptr_calldata], r1, r1\n\tld\tr1, r1\n\tand\t@CPI0_3[0], r1, r6\n\tsub.s!\t@CPI0_3[0], r1, r1\n\tjump.le\t@.BB0_61\n.BB0_2:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_61:\n\tsload\tr0, r2\n\tand\t@CPI0_3[0], r2, r1\n\tcontext.caller\tr5\n\tsub!\tr1, r5, r1\n\tjump.ne\t@.BB0_29\n\tsub.s!\t0, r6, r1\n\tjump.ne\t@.BB0_64\n\tld.1\t64, r1\n\tadd\t100, r1, r2\n\tadd\t@CPI0_35[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t68, r1, r2\n\tadd\t@CPI0_36[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t36, r1, r2\n\tadd\t38, r0, r3\n\tst.1\tr2, r3\n\tadd\t@CPI0_37[0], r0, r2\n\tst.1\tr1, r2\n\tadd\t4, r1, r2\n\tadd\t32, r0, r3\n\tst.1\tr2, r3\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tshl.s\t64, r1, r1\n\tor\t@CPI0_38[0], r1, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_29:\n\tld.1\t64, r1\n\tadd\t68, r1, r2\n\tadd\t@CPI0_41[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t@CPI0_37[0], r0, r2\n\tst.1\tr1, r2\n\tadd\t36, r1, r2\n\tadd\t32, r0, r3\n\tst.1\tr2, r3\n\tadd\t4, r1, r2\n\tst.1\tr2, r3\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tshl.s\t64, r1, r1\n\tor\t@CPI0_40[0], r1, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_71:\n\tadd\t@CPI0_0[0], r0, r3\n\tsub.s!\t@CPI0_0[0], r1, r4\n\tadd.ge\tr3, r0, r1\n\tsub.s!\t@CPI0_0[0], r10, r4\n\tadd.lt\tr10, r0, r3\n\tshl.s\t64, r3, r3\n\tshl.s\t192, r1, r1\n\tor\tr1, r3, r1\n\tor\t@CPI0_18[0], r1, r1\n\tadd\tr10, r0, stack-[7]\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tstack-[7], r0, r10\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, r3\n\tsub.s!\t32, r3, r4\n\tadd\t32, r0, r4\n\tadd.lt\tr3, r0, r4\n\tand\t31, r4, r5\n\tshr.s!\t5, r4, r6\n\tjump.eq\t@.BB0_142\n\tadd\tr0, r0, r7\n.BB0_73:\n\tshl.s\t5, r7, r8\n\tadd\tr10, r8, r9\n\tptr.add\tr1, r8, r8\n\tld\tr8, r8\n\tst.1\tr9, r8\n\tadd\t1, r7, r7\n\tsub!\tr7, r6, r8\n\tjump.lt\t@.BB0_73\n.BB0_142:\n\tsub.s!\t0, r5, r7\n\tjump.eq\t@.BB0_75\n\tshl.s\t5, r6, r6\n\tptr.add\tr1, r6, r7\n\tadd\tr10, r6, r6\n\tshl.s\t3, r5, r5\n\tld.1\tr6, r8\n\tshl\tr8, r5, r8\n\tshr\tr8, r5, r8\n\tld\tr7, r7\n\tsub\t256, r5, r5\n\tshr\tr7, r5, r7\n\tshl\tr7, r5, r5\n\tor\tr5, r8, r5\n\tst.1\tr6, r5\n.BB0_75:\n\tadd\tr3, r0, stack[@returndatasize]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_76\n.BB0_81:\n\tadd\t31, r4, r1\n\tand\t96, r1, r2\n\tadd\tr2, r10, r1\n\tsub!\tr1, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tsub.s!\t@CPI0_19[0], r1, r4\n\tjump.gt\t@.BB0_4\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_4\n\tst.1\t64, r1\n\tsub.s!\t32, r3, r1\n\tjump.lt\t@.BB0_2\n\tld.1\tr10, r4\n\tsub.s!\t@CPI0_20[0], r4, r1\n\tjump.ge\t@.BB0_2\n\tst.1\t0, r4\n\tadd\t2, r0, r1\n\tst.1\t32, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.lt\tr2, r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_21[0], r1, r1\n\tadd\t32784, r0, r2\n\tadd\tr4, r0, stack-[7]\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tadd\t1, r0, r2\n\tadd\tr2, r0, stack-[5]\n\tsload\tr2, r2\n\tld\tr1, r1\n\tsload\tr1, r1\n\tld.1\t64, r10\n\tadd\t@CPI0_22[0], r0, r3\n\tst.1.inc\tr10, r3, r3\n\tadd\tr3, r0, stack-[6]\n\tadd\t4, r10, r3\n\tst.1\tr3, r1\n\tcontext.gas_left\tr1\n\tand\t@CPI0_3[0], r2, r2\n\tsub.s!\t4, r2, r3\n\tjump.ne\t@.BB0_88\n\tadd\tstack[@returndatasize], r0, r3\n\tsub.s!\t128, r3, r1\n\tadd\t128, r0, r4\n\tadd.lt\tr3, r0, r4\n\tjump\t@.BB0_98\n.BB0_64:\n\tadd\tr2, r0, stack-[6]\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.lt\tr2, r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_5[0], r1, r1\n\tadd\t32781, r0, r2\n\tadd\t3, r0, r3\n\tadd\t@CPI0_6[0], r0, r4\n\tadd\tr6, r0, stack-[7]\n\tadd\tstack-[7], r0, r6\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tadd\tstack-[7], r0, r3\n\tand!\t1, r2, r1\n\tjump.eq\t@.BB0_2\n\tadd\tstack-[6], r0, r1\n\tand\t@CPI0_4[0], r1, r1\n\tor\tr1, r3, r1\n\tsstore\tr0, r1\n\tadd\tr0, r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_76:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r3\n\tjump.eq\t@.BB0_141\n\tadd\tr0, r0, r5\n.BB0_78:\n\tshl.s\t5, r5, r6\n\tadd\tr2, r6, r7\n\tptr.add\tr1, r6, r6\n\tld\tr6, r6\n\tst.1\tr7, r6\n\tadd\t1, r5, r5\n\tsub!\tr5, r3, r6\n\tjump.lt\t@.BB0_78\n.BB0_141:\n\tsub.s!\t0, r4, r5\n\tjump.eq\t@.BB0_80\n\tshl.s\t5, r3, r3\n\tptr.add\tr1, r3, r1\n\tadd\tr2, r3, r3\n\tshl.s\t3, r4, r4\n\tld.1\tr3, r5\n\tshl\tr5, r4, r5\n\tshr\tr5, r4, r5\n\tld\tr1, r1\n\tsub\t256, r4, r4\n\tshr\tr1, r4, r1\n\tshl\tr1, r4, r1\n\tor\tr1, r5, r1\n\tst.1\tr3, r1\n.BB0_80:\n\tadd\t@CPI0_0[0], r0, r1\n\tadd\tstack[@returndatasize], r0, r3\n\tsub.s!\t@CPI0_0[0], r3, r4\n\tadd.ge\tr1, r0, r3\n\tsub.s!\t@CPI0_0[0], r2, r4\n\tadd.lt\tr2, r0, r1\n\tshl.s\t64, r1, r1\n\tshl.s\t96, r3, r2\n\tor\tr2, r1, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_88:\n\tadd\t@CPI0_0[0], r0, r3\n\tsub.s!\t@CPI0_0[0], r1, r4\n\tadd.ge\tr3, r0, r1\n\tsub.s!\t@CPI0_0[0], r10, r4\n\tadd.lt\tr10, r0, r3\n\tshl.s\t64, r3, r3\n\tshl.s\t192, r1, r1\n\tor\tr1, r3, r1\n\tor\t@CPI0_23[0], r1, r1\n\tadd\tr10, r0, stack-[4]\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tstack-[4], r0, r10\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, r3\n\tsub.s!\t128, r3, r4\n\tadd\t128, r0, r4\n\tadd.lt\tr3, r0, r4\n\tand\t31, r4, r5\n\tshr.s!\t5, r4, r6\n\tjump.eq\t@.BB0_140\n\tadd\tr0, r0, r7\n.BB0_90:\n\tshl.s\t5, r7, r8\n\tadd\tr10, r8, r9\n\tptr.add\tr1, r8, r8\n\tld\tr8, r8\n\tst.1\tr9, r8\n\tadd\t1, r7, r7\n\tsub!\tr7, r6, r8\n\tjump.lt\t@.BB0_90\n.BB0_140:\n\tsub.s!\t0, r5, r7\n\tjump.eq\t@.BB0_92\n\tshl.s\t5, r6, r6\n\tptr.add\tr1, r6, r7\n\tadd\tr10, r6, r6\n\tshl.s\t3, r5, r5\n\tld.1\tr6, r8\n\tshl\tr8, r5, r8\n\tshr\tr8, r5, r8\n\tld\tr7, r7\n\tsub\t256, r5, r5\n\tshr\tr7, r5, r7\n\tshl\tr7, r5, r5\n\tor\tr5, r8, r5\n\tst.1\tr6, r5\n.BB0_92:\n\tadd\tr3, r0, stack[@returndatasize]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_93\n.BB0_98:\n\tadd\t31, r4, r1\n\tand\t480, r1, r2\n\tadd\tr2, r10, r1\n\tsub!\tr1, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tsub.s!\t@CPI0_19[0], r1, r4\n\tjump.gt\t@.BB0_4\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_4\n\tst.1\t64, r1\n\tsub.s!\t128, r3, r2\n\tjump.lt\t@.BB0_2\n\tsub.s!\t@CPI0_24[0], r1, r2\n\tjump.gt\t@.BB0_4\n\tadd\t128, r1, r2\n\tst.1\t64, r2\n\tld.1\tr10, r2\n\tand!\t@CPI0_25[0], r2, r3\n\tadd\t@CPI0_26[0], r0, r3\n\tadd.eq\t0, r0, r3\n\tand\t@CPI0_27[0], r2, r4\n\tor\tr3, r4, r3\n\tsub!\tr2, r3, r3\n\tjump.ne\t@.BB0_2\n\tst.1.inc\tr1, r2, r2\n\tadd\tstack-[6], r0, r3\n\tld.1\tr3, r3\n\tsub.s!\t@CPI0_19[0], r3, r4\n\tjump.gt\t@.BB0_2\n\tst.1\tr2, r3\n\tadd\t64, r10, r2\n\tld.1\tr2, r2\n\tand!\t@CPI0_28[0], r2, r3\n\tadd\t@CPI0_29[0], r0, r3\n\tadd.eq\t0, r0, r3\n\tand\t@CPI0_30[0], r2, r4\n\tor\tr3, r4, r3\n\tsub!\tr2, r3, r3\n\tjump.ne\t@.BB0_2\n\tadd\t64, r1, r3\n\tst.1\tr3, r2\n\tadd\t96, r1, r3\n\tadd\t96, r10, r4\n\tld.1\tr4, r4\n\tst.1\tr3, r4\n\tand!\t@CPI0_28[0], r2, r3\n\tadd\t@CPI0_29[0], r0, r3\n\tadd.eq\t0, r0, r3\n\tand\t@CPI0_30[0], r2, r4\n\tor\tr3, r4, r3\n\tadd\t@CPI0_2[0], r0, r4\n\tsub.s!\t0, r3, r5\n\tadd\t0, r0, r5\n\tadd.gt\tr4, r0, r5\n\tand\t@CPI0_2[0], r3, r6\n\tsub.s!\t0, r6, r7\n\tadd.ge\t0, r0, r4\n\tsub.s!\t@CPI0_2[0], r6, r6\n\tadd.ne\tr5, r0, r4\n\tsub.s!\t0, r4, r4\n\tjump.ne\t@.BB0_109\n\tsub.s!\t@CPI0_29[0], r3, r2\n\tjump.eq\t@.BB0_107\n\tsub\t0, r3, r2\n.BB0_109:\n\tld.1\tr1, r1\n\tadd\tr1, r0, stack-[4]\n\tand\t@CPI0_0[0], r2, r1\n\tsub.s!\t77, r1, r2\n\tjump.le\t@.BB0_110\n.BB0_107:\n\tadd\t@CPI0_32[0], r0, r1\n\tst.1\t0, r1\n\tadd\t17, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI0_23[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_93:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r3\n\tjump.eq\t@.BB0_139\n\tadd\tr0, r0, r5\n.BB0_95:\n\tshl.s\t5, r5, r6\n\tadd\tr2, r6, r7\n\tptr.add\tr1, r6, r6\n\tld\tr6, r6\n\tst.1\tr7, r6\n\tadd\t1, r5, r5\n\tsub!\tr5, r3, r6\n\tjump.lt\t@.BB0_95\n.BB0_139:\n\tsub.s!\t0, r4, r5\n\tjump.eq\t@.BB0_97\n\tshl.s\t5, r3, r3\n\tptr.add\tr1, r3, r1\n\tadd\tr2, r3, r3\n\tshl.s\t3, r4, r4\n\tld.1\tr3, r5\n\tshl\tr5, r4, r5\n\tshr\tr5, r4, r5\n\tld\tr1, r1\n\tsub\t256, r4, r4\n\tshr\tr1, r4, r1\n\tshl\tr1, r4, r1\n\tor\tr1, r5, r1\n\tst.1\tr3, r1\n.BB0_97:\n\tadd\t@CPI0_0[0], r0, r1\n\tadd\tstack[@returndatasize], r0, r3\n\tsub.s!\t@CPI0_0[0], r3, r4\n\tadd.ge\tr1, r0, r3\n\tsub.s!\t@CPI0_0[0], r2, r4\n\tadd.lt\tr2, r0, r1\n\tshl.s\t64, r1, r1\n\tshl.s\t96, r3, r2\n\tor\tr2, r1, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_53:\n\tld.1\t64, r1\n\tadd\t68, r1, r2\n\tadd\t@CPI0_39[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t36, r1, r2\n\tadd\t15, r0, r3\n\tst.1\tr2, r3\n\tadd\t@CPI0_37[0], r0, r2\n\tst.1\tr1, r2\n\tadd\t4, r1, r2\n\tadd\t32, r0, r3\n\tst.1\tr2, r3\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tshl.s\t64, r1, r1\n\tor\t@CPI0_40[0], r1, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_110:\n\tsub.s!\t0, r1, r2\n\tjump.eq\t@.BB0_115\n\tadd\t10, r0, r2\n\tadd\t1, r0, r5\n.BB0_112:\n\tand!\t1, r1, r3\n\tadd\tr2, r0, r3\n\tadd.eq\t1, r0, r3\n\tmul\tr3, r5, r5, r3\n\tshr.s\t1, r1, r3\n\tmul\tr2, r2, r2, r4\n\tsub.s!\t1, r1, r1\n\tadd\tr3, r0, r1\n\tjump.gt\t@.BB0_112\n\tadd\tr5, r0, stack-[5]\n\tsub.s!\t0, r5, r1\n\tjump.ne\t@.BB0_115\n.BB0_114:\n\tadd\t@CPI0_32[0], r0, r1\n\tst.1\t0, r1\n\tadd\t18, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI0_23[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_115:\n\tld.1\t64, r2\n\tadd\t@CPI0_31[0], r0, r1\n\tadd\tr2, r0, stack-[6]\n\tst.1\tr2, r1\n\tcontext.gas_left\tr1\n\tadd\tstack-[7], r0, r2\n\tsub.s!\t4, r2, r2\n\tjump.ne\t@.BB0_117\n\tadd\tstack[@returndatasize], r0, r3\n\tsub.s!\t32, r3, r1\n\tadd\t32, r0, r4\n\tadd.lt\tr3, r0, r4\n\tjump\t@.BB0_127\n.BB0_117:\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tadd\tstack-[6], r0, r4\n\tsub.s!\t@CPI0_0[0], r4, r3\n\tadd.lt\tr4, r0, r2\n\tshl.s\t64, r2, r2\n\tshl.s\t192, r1, r1\n\tor\tr1, r2, r1\n\tor\t@CPI0_18[0], r1, r1\n\tadd\tstack-[7], r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tstack-[6], r0, r10\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, r3\n\tsub.s!\t32, r3, r4\n\tadd\t32, r0, r4\n\tadd.lt\tr3, r0, r4\n\tand\t31, r4, r5\n\tshr.s!\t5, r4, r6\n\tjump.eq\t@.BB0_138\n\tadd\tr0, r0, r7\n.BB0_119:\n\tshl.s\t5, r7, r8\n\tadd\tr10, r8, r9\n\tptr.add\tr1, r8, r8\n\tld\tr8, r8\n\tst.1\tr9, r8\n\tadd\t1, r7, r7\n\tsub!\tr7, r6, r8\n\tjump.lt\t@.BB0_119\n.BB0_138:\n\tsub.s!\t0, r5, r7\n\tjump.eq\t@.BB0_121\n\tshl.s\t5, r6, r6\n\tptr.add\tr1, r6, r7\n\tadd\tstack-[6], r0, r8\n\tadd\tr8, r6, r6\n\tshl.s\t3, r5, r5\n\tld.1\tr6, r8\n\tshl\tr8, r5, r8\n\tshr\tr8, r5, r8\n\tld\tr7, r7\n\tsub\t256, r5, r5\n\tshr\tr7, r5, r7\n\tshl\tr7, r5, r5\n\tor\tr5, r8, r5\n\tst.1\tr6, r5\n.BB0_121:\n\tadd\tr3, r0, stack[@returndatasize]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_122\n.BB0_127:\n\tadd\t31, r4, r1\n\tand\t96, r1, r2\n\tadd\tstack-[6], r0, r1\n\tadd\tr2, r1, r1\n\tsub!\tr1, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tsub.s!\t@CPI0_19[0], r1, r4\n\tjump.gt\t@.BB0_4\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_4\n\tst.1\t64, r1\n\tsub.s!\t32, r3, r2\n\tjump.lt\t@.BB0_2\n\tadd\tstack-[6], r0, r2\n\tld.1\tr2, r3\n\tsub.s!\t255, r3, r2\n\tjump.gt\t@.BB0_2\n\tsub.s!\t77, r3, r2\n\tjump.gt\t@.BB0_107\n\tadd\t1, r0, r2\n\tsub.s!\t0, r3, r4\n\tjump.eq\t@.BB0_136\n\tadd\t10, r0, r4\n\tadd\t1, r0, r2\n.BB0_134:\n\tand!\t1, r3, r5\n\tadd\tr4, r0, r5\n\tadd.eq\t1, r0, r5\n\tmul\tr5, r2, r2, r5\n\tshr.s\t1, r3, r5\n\tmul\tr4, r4, r4, r6\n\tsub.s!\t1, r3, r3\n\tadd\tr5, r0, r3\n\tjump.gt\t@.BB0_134\n\tsub.s!\t0, r2, r3\n\tjump.eq\t@.BB0_114\n.BB0_136:\n\tadd\tstack-[4], r0, r7\n\tand!\t@CPI0_25[0], r7, r3\n\tadd\t@CPI0_26[0], r0, r3\n\tadd.eq\t0, r0, r3\n\tand\t@CPI0_27[0], r7, r4\n\tor\tr3, r4, r3\n\tadd\t@CPI0_2[0], r0, r4\n\tsub.s!\t0, r3, r5\n\tadd\t0, r0, r5\n\tadd.gt\tr4, r0, r5\n\tand\t@CPI0_2[0], r3, r3\n\tsub.s!\t0, r3, r6\n\tadd.ge\t0, r0, r4\n\tsub.s!\t@CPI0_2[0], r3, r3\n\tadd\tr5, r0, r3\n\tadd.eq\tr4, r0, r3\n\tand\t@CPI0_19[0], r7, r4\n\tmul\t@CPI0_33[0], r4, r4, r5\n\tsub.s!\t0, r3, r3\n\tadd\t0, r0, r3\n\tadd.ne\tr4, r0, r3\n\tadd\tstack-[5], r0, r4\n\tdiv\tr3, r4, r3, r4\n\tdiv\tr3, r2, r2, r3\n\tst.1\tr1, r2\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tshl.s\t64, r1, r1\n\tor\t@CPI0_34[0], r1, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_122:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r3\n\tjump.eq\t@.BB0_137\n\tadd\tr0, r0, r5\n.BB0_124:\n\tshl.s\t5, r5, r6\n\tadd\tr2, r6, r7\n\tptr.add\tr1, r6, r6\n\tld\tr6, r6\n\tst.1\tr7, r6\n\tadd\t1, r5, r5\n\tsub!\tr5, r3, r6\n\tjump.lt\t@.BB0_124\n.BB0_137:\n\tsub.s!\t0, r4, r5\n\tjump.eq\t@.BB0_126\n\tshl.s\t5, r3, r3\n\tptr.add\tr1, r3, r1\n\tadd\tr2, r3, r3\n\tshl.s\t3, r4, r4\n\tld.1\tr3, r5\n\tshl\tr5, r4, r5\n\tshr\tr5, r4, r5\n\tld\tr1, r1\n\tsub\t256, r4, r4\n\tshr\tr1, r4, r1\n\tshl\tr1, r4, r1\n\tor\tr1, r5, r1\n\tst.1\tr3, r1\n.BB0_126:\n\tadd\t@CPI0_0[0], r0, r1\n\tadd\tstack[@returndatasize], r0, r3\n\tsub.s!\t@CPI0_0[0], r3, r4\n\tadd.ge\tr1, r0, r3\n\tsub.s!\t@CPI0_0[0], r2, r4\n\tadd.lt\tr2, r0, r1\n\tshl.s\t64, r1, r1\n\tshl.s\t96, r3, r2\n\tor\tr2, r1, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end0:\n\n__keccak256:\n.func_begin1:\n\tadd\t@CPI1_0[0], r0, r2\n\tcontext.gas_left\tr3\n\tsub.s!\t@CPI1_0[0], r3, r4\n\tadd.ge\tr2, r0, r3\n\tsub.s!\t@CPI1_0[0], r1, r4\n\tadd.ge\tr2, r0, r1\n\tshl.s\t64, r1, r1\n\tshl.s\t192, r3, r2\n\tor\tr2, r1, r1\n\tor\t@CPI1_1[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB1_2\n\tld\tr1, r1\n\tret\n.BB1_2:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end1:\n\n__farcall:\n.func_begin2:\n.tmp0:\n\tfar_call\tr1, r2, @.BB2_2\n.tmp1:\n\tadd\t1, r0, r2\n\tret\n.BB2_2:\n.tmp2:\n\tadd\tr0, r0, r2\n\tret\n.func_end2:\n\n__staticcall:\n.func_begin3:\n.tmp3:\n\tfar_call.static\tr1, r2, @.BB3_2\n.tmp4:\n\tadd\t1, r0, r2\n\tret\n.BB3_2:\n.tmp5:\n\tadd\tr0, r0, r2\n\tret\n.func_end3:\n\n\t.data\n\t.p2align\t5\ncalldatasize:\n\t.cell 0\n\n\t.p2align\t5\nreturndatasize:\n\t.cell 0\n\n\t.p2align\t5\nptr_calldata:\n.cell\t0\n\n\t.note.GNU-stack\n\t.rodata\nCPI0_0:\nCPI1_0:\n\t.cell 4294967295\nCPI0_1:\n\t.cell 18446744073709551616\nCPI0_2:\n\t.cell -57896044618658097711785492504343953926634992332820282019728792003956564819968\nCPI0_3:\n\t.cell 1461501637330902918203684832716283019655932542975\nCPI0_4:\n\t.cell -1461501637330902918203684832716283019655932542976\nCPI0_5:\n\t.cell 904625697166532776746648320380374280103671755200316906558262375061821325312\nCPI0_6:\n\t.cell -52524777015005588113349992707137368332388074750292320778649315033004770043936\nCPI0_7:\n\t.cell 53919893334301279589334030174039261352344891250716429051063678533632\nCPI0_8:\n\t.cell 3631924830\nCPI0_9:\n\t.cell 4076725130\nCPI0_10:\n\t.cell 4076725131\nCPI0_11:\n\t.cell 4233614559\nCPI0_12:\n\t.cell 3631924831\nCPI0_13:\n\t.cell 4017747040\nCPI0_14:\n\t.cell 303779935\nCPI0_15:\n\t.cell 1901074598\nCPI0_16:\n\t.cell 2376452955\nCPI0_17:\n\t.cell 50292402827334880472107169365697159231523039388532301717704428044325102813184\nCPI0_18:\n\t.cell 316912650057057350374175801344\nCPI0_19:\n\t.cell 18446744073709551615\nCPI0_20:\n\t.cell 1461501637330902918203684832716283019655932542976\nCPI0_21:\nCPI1_1:\n\t.cell 904625697166532776746648320380374280103671760270919307471179981048634146816\nCPI0_22:\n\t.cell -47713188566561859549891682160888522658895649115624676199408099926252873318400\nCPI0_23:\n\t.cell 2852213850513516153367582212096\nCPI0_24:\n\t.cell 18446744073709551487\nCPI0_25:\n\t.cell 9223372036854775808\nCPI0_26:\n\t.cell -9223372036854775808\nCPI0_27:\n\t.cell 9223372036854775807\nCPI0_28:\n\t.cell 2147483648\nCPI0_29:\n\t.cell -2147483648\nCPI0_30:\n\t.cell 2147483647\nCPI0_31:\n\t.cell 22270923681254677845691103109158760375340177724800803888364822332811285364736\nCPI0_32:\n\t.cell 35408467139433450592217433187231851964531694900788300625387963629091585785856\nCPI0_33:\n\t.cell 1000000000000000000000000000000000000\nCPI0_34:\n\t.cell 2535301200456458802993406410752\nCPI0_35:\n\t.cell 45408759099000846574684193736602357774271237157169010951590501707763511459840\nCPI0_36:\n\t.cell 35943731656364841964517558219894961445653631979235167635064085396828900499553\nCPI0_37:\n\t.cell 3963877391197344453575983046348115674221700746820753546331534351508065746944\nCPI0_38:\n\t.cell 10458117451882892562347801444352\nCPI0_39:\n\t.cell 34554990027102577073043204599294676384492137952586467632003681380857697796096\nCPI0_40:\n\t.cell 7922816251426433759354395033600\nCPI0_41:\n\t.cell 35943731656364841964516503116990081338611484598491072354577564874054038349170\nCPI0_42:\n\t.cell 2535301202817642044428229017600\n","bytecode":{"object":""},"methodIdentifiers":{"getUnderlyingPrice(address)":"fc57d4df","owner()":"8da5cb5b","pythMain()":"121b505f","renounceOwnership()":"715018a6","setTokenFeeds(address[],bytes32[])":"ef79f460","tokenFeeds(address)":"d87ac65f","transferOwnership(address)":"f2fde38b"}},"irOptimized":"/// @use-src 3:\"contracts/Ownable.sol\", 5:\"contracts/oracle/PythAdaptor.sol\"\nobject \"PythAdaptor_517\" {\n    code {\n        {\n            /// @src 5:266:1660  \"contract PythAdaptor is Ownable {...\"\n            let _1 := memoryguard(0x80)\n            if callvalue() { revert(0, 0) }\n            let programSize := datasize(\"PythAdaptor_517\")\n            let argSize := sub(codesize(), programSize)\n            let newFreePtr := add(_1, and(add(argSize, 31), not(31)))\n            if or(gt(newFreePtr, sub(shl(64, 1), 1)), lt(newFreePtr, _1))\n            {\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 5:266:1660  \"contract PythAdaptor is Ownable {...\" */ shl(224, 0x4e487b71))\n                mstore(4, 0x41)\n                revert(/** @src -1:-1:-1 */ 0, /** @src 5:266:1660  \"contract PythAdaptor is Ownable {...\" */ 0x24)\n            }\n            mstore(64, newFreePtr)\n            codecopy(_1, programSize, argSize)\n            if slt(sub(add(_1, argSize), _1), 32)\n            {\n                revert(/** @src -1:-1:-1 */ 0, 0)\n            }\n            /// @src 5:266:1660  \"contract PythAdaptor is Ownable {...\"\n            let value := mload(_1)\n            let _2 := and(value, sub(shl(160, 1), 1))\n            if iszero(eq(value, _2))\n            {\n                revert(/** @src -1:-1:-1 */ 0, 0)\n            }\n            /// @src 5:266:1660  \"contract PythAdaptor is Ownable {...\"\n            let _3 := not(sub(shl(160, 1), 1))\n            sstore(/** @src -1:-1:-1 */ 0, /** @src 5:266:1660  \"contract PythAdaptor is Ownable {...\" */ or(and(sload(/** @src -1:-1:-1 */ 0), /** @src 5:266:1660  \"contract PythAdaptor is Ownable {...\" */ _3), /** @src 3:242:252  \"msg.sender\" */ caller()))\n            /// @src 3:268:312  \"OwnershipTransferred(address(0), msg.sender)\"\n            let _4 := /** @src 5:266:1660  \"contract PythAdaptor is Ownable {...\" */ mload(64)\n            /// @src 3:268:312  \"OwnershipTransferred(address(0), msg.sender)\"\n            log3(/** @src -1:-1:-1 */ 0, 0, /** @src 3:268:312  \"OwnershipTransferred(address(0), msg.sender)\" */ 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0, /** @src -1:-1:-1 */ 0, /** @src 3:242:252  \"msg.sender\" */ caller())\n            /// @src 5:266:1660  \"contract PythAdaptor is Ownable {...\"\n            sstore(/** @src 5:425:452  \"pythMain = IPyth(_pythMain)\" */ 0x01, /** @src 5:266:1660  \"contract PythAdaptor is Ownable {...\" */ or(and(sload(/** @src 5:425:452  \"pythMain = IPyth(_pythMain)\" */ 0x01), /** @src 5:266:1660  \"contract PythAdaptor is Ownable {...\" */ _3), _2))\n            let _5 := datasize(\"PythAdaptor_517_deployed\")\n            codecopy(_4, dataoffset(\"PythAdaptor_517_deployed\"), _5)\n            return(_4, _5)\n        }\n    }\n    /// @use-src 3:\"contracts/Ownable.sol\", 5:\"contracts/oracle/PythAdaptor.sol\"\n    object \"PythAdaptor_517_deployed\" {\n        code {\n            {\n                /// @src 5:266:1660  \"contract PythAdaptor is Ownable {...\"\n                let _1 := memoryguard(0x80)\n                let _2 := 64\n                mstore(_2, _1)\n                let _3 := 4\n                if iszero(lt(calldatasize(), _3))\n                {\n                    let _4 := 0\n                    switch shr(224, calldataload(_4))\n                    case 0x121b505f {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                        mstore(_1, and(sload(/** @src 5:304:325  \"IPyth public pythMain\" */ 1), /** @src 5:266:1660  \"contract PythAdaptor is Ownable {...\" */ sub(shl(160, 1), 1)))\n                        return(_1, 32)\n                    }\n                    case 0x715018a6 {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                        let _5 := sload(_4)\n                        let value := and(_5, sub(shl(160, 1), 1))\n                        /// @src 3:439:504  \"require(_owner == msg.sender, \\\"Ownable: caller is not the owner\\\")\"\n                        require_helper_stringliteral(/** @src 3:447:467  \"_owner == msg.sender\" */ eq(/** @src 5:266:1660  \"contract PythAdaptor is Ownable {...\" */ value, /** @src 3:457:467  \"msg.sender\" */ caller()))\n                        /// @src 3:589:629  \"OwnershipTransferred(_owner, address(0))\"\n                        log3(/** @src 5:266:1660  \"contract PythAdaptor is Ownable {...\" */ _4, _4, /** @src 3:589:629  \"OwnershipTransferred(_owner, address(0))\" */ 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0, value, /** @src 5:266:1660  \"contract PythAdaptor is Ownable {...\" */ _4)\n                        sstore(_4, and(_5, shl(160, 0xffffffffffffffffffffffff)))\n                        return(_4, _4)\n                    }\n                    case 0x8da5cb5b {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                        let value_1 := and(sload(_4), sub(shl(160, 1), 1))\n                        let memPos := mload(_2)\n                        mstore(memPos, value_1)\n                        return(memPos, 32)\n                    }\n                    case 0xd87ac65f {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(_4, _4) }\n                        let value_2 := calldataload(_3)\n                        let _6 := and(value_2, sub(shl(160, 1), 1))\n                        if iszero(eq(value_2, _6)) { revert(_4, _4) }\n                        mstore(_4, _6)\n                        mstore(32, /** @src 5:332:377  \"mapping(address => bytes32) public tokenFeeds\" */ 2)\n                        /// @src 5:266:1660  \"contract PythAdaptor is Ownable {...\"\n                        let _7 := sload(keccak256(_4, _2))\n                        let memPos_1 := mload(_2)\n                        mstore(memPos_1, _7)\n                        return(memPos_1, 32)\n                    }\n                    case 0xef79f460 {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _2) { revert(_4, _4) }\n                        let offset := calldataload(_3)\n                        let _8 := 0xffffffffffffffff\n                        if gt(offset, _8) { revert(_4, _4) }\n                        let value0, value1 := abi_decode_array_address_dyn_calldata(add(_3, offset), calldatasize())\n                        let _9 := 36\n                        let offset_1 := calldataload(_9)\n                        if gt(offset_1, _8) { revert(_4, _4) }\n                        let value2, value3 := abi_decode_array_address_dyn_calldata(add(_3, offset_1), calldatasize())\n                        let _10 := sub(shl(160, 1), 1)\n                        let value_3 := and(sload(_4), _10)\n                        /// @src 3:439:504  \"require(_owner == msg.sender, \\\"Ownable: caller is not the owner\\\")\"\n                        require_helper_stringliteral(/** @src 3:447:467  \"_owner == msg.sender\" */ eq(/** @src 5:266:1660  \"contract PythAdaptor is Ownable {...\" */ value_3, /** @src 3:457:467  \"msg.sender\" */ caller()))\n                        /// @src 5:266:1660  \"contract PythAdaptor is Ownable {...\"\n                        if iszero(/** @src 5:578:607  \"tokens.length == feeds.length\" */ eq(value1, value3))\n                        /// @src 5:266:1660  \"contract PythAdaptor is Ownable {...\"\n                        {\n                            let memPtr := mload(_2)\n                            mstore(memPtr, shl(229, 4594637))\n                            mstore(add(memPtr, _3), 32)\n                            mstore(add(memPtr, _9), 15)\n                            mstore(add(memPtr, 68), \"Length mismatch\")\n                            revert(memPtr, 100)\n                        }\n                        /// @src 5:642:652  \"uint i = 0\"\n                        let var_i := /** @src 5:266:1660  \"contract PythAdaptor is Ownable {...\" */ _4\n                        /// @src 5:637:735  \"for (uint i = 0; i < tokens.length; i++) {...\"\n                        for { }\n                        /** @src 5:654:671  \"i < tokens.length\" */ lt(var_i, value1)\n                        /// @src 5:642:652  \"uint i = 0\"\n                        {\n                            /// @src 5:266:1660  \"contract PythAdaptor is Ownable {...\"\n                            if eq(var_i, not(0))\n                            {\n                                mstore(_4, shl(224, 0x4e487b71))\n                                mstore(_3, 0x11)\n                                revert(_4, _9)\n                            }\n                            /// @src 5:673:676  \"i++\"\n                            var_i := /** @src 5:266:1660  \"contract PythAdaptor is Ownable {...\" */ add(var_i, 1)\n                        }\n                        /// @src 5:673:676  \"i++\"\n                        {\n                            /// @src 5:266:1660  \"contract PythAdaptor is Ownable {...\"\n                            let value_4 := calldataload(/** @src 5:716:724  \"feeds[i]\" */ calldata_array_index_access_bytes32_dyn_calldata(value2, value3, var_i))\n                            /// @src 5:266:1660  \"contract PythAdaptor is Ownable {...\"\n                            let value_5 := calldataload(/** @src 5:703:712  \"tokens[i]\" */ calldata_array_index_access_bytes32_dyn_calldata(value0, value1, var_i))\n                            /// @src 5:266:1660  \"contract PythAdaptor is Ownable {...\"\n                            let _11 := and(value_5, _10)\n                            if iszero(eq(value_5, _11)) { revert(_4, _4) }\n                            mstore(_4, _11)\n                            mstore(32, /** @src 5:692:702  \"tokenFeeds\" */ 0x02)\n                            /// @src 5:266:1660  \"contract PythAdaptor is Ownable {...\"\n                            sstore(keccak256(_4, _2), value_4)\n                        }\n                        return(_4, _4)\n                    }\n                    case 0xf2fde38b {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(_4, _4) }\n                        let value_6 := calldataload(_3)\n                        let _12 := sub(shl(160, 1), 1)\n                        let _13 := and(value_6, _12)\n                        if iszero(eq(value_6, _13)) { revert(_4, _4) }\n                        let _14 := sload(_4)\n                        let value_7 := and(_14, _12)\n                        /// @src 3:439:504  \"require(_owner == msg.sender, \\\"Ownable: caller is not the owner\\\")\"\n                        require_helper_stringliteral(/** @src 3:447:467  \"_owner == msg.sender\" */ eq(/** @src 5:266:1660  \"contract PythAdaptor is Ownable {...\" */ value_7, /** @src 3:457:467  \"msg.sender\" */ caller()))\n                        /// @src 5:266:1660  \"contract PythAdaptor is Ownable {...\"\n                        if /** @src 3:751:773  \"newOwner != address(0)\" */ iszero(/** @src 5:266:1660  \"contract PythAdaptor is Ownable {...\" */ _13)\n                        {\n                            let memPtr_1 := mload(_2)\n                            mstore(memPtr_1, shl(229, 4594637))\n                            mstore(add(memPtr_1, _3), 32)\n                            mstore(add(memPtr_1, 36), 38)\n                            mstore(add(memPtr_1, 68), \"Ownable: new owner is the zero a\")\n                            mstore(add(memPtr_1, 100), \"ddress\")\n                            revert(memPtr_1, 132)\n                        }\n                        /// @src 3:831:869  \"OwnershipTransferred(_owner, newOwner)\"\n                        log3(/** @src 5:266:1660  \"contract PythAdaptor is Ownable {...\" */ _4, _4, /** @src 3:831:869  \"OwnershipTransferred(_owner, newOwner)\" */ 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0, value_7, _13)\n                        /// @src 5:266:1660  \"contract PythAdaptor is Ownable {...\"\n                        sstore(_4, or(and(_14, shl(160, 0xffffffffffffffffffffffff)), _13))\n                        return(_4, _4)\n                    }\n                    case 0xfc57d4df {\n                        if callvalue() { revert(_4, _4) }\n                        let _15 := 32\n                        if slt(add(calldatasize(), not(3)), _15) { revert(_4, _4) }\n                        let value_8 := calldataload(_3)\n                        let _16 := sub(shl(160, 1), 1)\n                        let _17 := and(value_8, _16)\n                        if iszero(eq(value_8, _17)) { revert(_4, _4) }\n                        /// @src 5:1179:1215  \"cTokenInterface(cToken).underlying()\"\n                        let _18 := /** @src 5:266:1660  \"contract PythAdaptor is Ownable {...\" */ mload(_2)\n                        /// @src 5:1179:1215  \"cTokenInterface(cToken).underlying()\"\n                        mstore(_18, /** @src 5:266:1660  \"contract PythAdaptor is Ownable {...\" */ shl(224, 0x6f307dc3))\n                        /// @src 5:1179:1215  \"cTokenInterface(cToken).underlying()\"\n                        let _19 := staticcall(gas(), _17, _18, /** @src 5:266:1660  \"contract PythAdaptor is Ownable {...\" */ _3, /** @src 5:1179:1215  \"cTokenInterface(cToken).underlying()\" */ _18, /** @src 5:266:1660  \"contract PythAdaptor is Ownable {...\" */ _15)\n                        /// @src 5:1179:1215  \"cTokenInterface(cToken).underlying()\"\n                        if iszero(_19)\n                        {\n                            /// @src 5:266:1660  \"contract PythAdaptor is Ownable {...\"\n                            let pos := mload(_2)\n                            returndatacopy(pos, _4, returndatasize())\n                            revert(pos, returndatasize())\n                        }\n                        /// @src 5:1179:1215  \"cTokenInterface(cToken).underlying()\"\n                        let expr := /** @src 5:266:1660  \"contract PythAdaptor is Ownable {...\" */ _4\n                        /// @src 5:1179:1215  \"cTokenInterface(cToken).underlying()\"\n                        if _19\n                        {\n                            let _20 := /** @src 5:266:1660  \"contract PythAdaptor is Ownable {...\" */ _15\n                            /// @src 5:1179:1215  \"cTokenInterface(cToken).underlying()\"\n                            if gt(/** @src 5:266:1660  \"contract PythAdaptor is Ownable {...\" */ _15, /** @src 5:1179:1215  \"cTokenInterface(cToken).underlying()\" */ returndatasize()) { _20 := returndatasize() }\n                            finalize_allocation(_18, _20)\n                            /// @src 5:266:1660  \"contract PythAdaptor is Ownable {...\"\n                            if slt(sub(/** @src 5:1179:1215  \"cTokenInterface(cToken).underlying()\" */ add(_18, _20), /** @src 5:266:1660  \"contract PythAdaptor is Ownable {...\" */ _18), _15) { revert(_4, _4) }\n                            let value_9 := mload(_18)\n                            if iszero(eq(value_9, and(value_9, _16))) { revert(_4, _4) }\n                            /// @src 5:1179:1215  \"cTokenInterface(cToken).underlying()\"\n                            expr := value_9\n                        }\n                        /// @src 5:266:1660  \"contract PythAdaptor is Ownable {...\"\n                        let _21 := and(expr, _16)\n                        mstore(_4, _21)\n                        mstore(_15, /** @src 5:1245:1255  \"tokenFeeds\" */ 0x02)\n                        /// @src 5:266:1660  \"contract PythAdaptor is Ownable {...\"\n                        let _22 := sload(keccak256(_4, _2))\n                        let value_10 := and(sload(/** @src 5:1320:1328  \"pythMain\" */ 0x01), /** @src 5:266:1660  \"contract PythAdaptor is Ownable {...\" */ _16)\n                        /// @src 5:1320:1354  \"pythMain.getPriceUnsafe(tokenFeed)\"\n                        let _23 := /** @src 5:266:1660  \"contract PythAdaptor is Ownable {...\" */ mload(_2)\n                        /// @src 5:1320:1354  \"pythMain.getPriceUnsafe(tokenFeed)\"\n                        mstore(_23, /** @src 5:266:1660  \"contract PythAdaptor is Ownable {...\" */ shl(224, 0x96834ad3))\n                        mstore(/** @src 5:1320:1354  \"pythMain.getPriceUnsafe(tokenFeed)\" */ add(_23, /** @src 5:266:1660  \"contract PythAdaptor is Ownable {...\" */ _3), _22)\n                        let _24 := 36\n                        /// @src 5:1320:1354  \"pythMain.getPriceUnsafe(tokenFeed)\"\n                        let _25 := staticcall(gas(), value_10, _23, /** @src 5:266:1660  \"contract PythAdaptor is Ownable {...\" */ _24, /** @src 5:1320:1354  \"pythMain.getPriceUnsafe(tokenFeed)\" */ _23, 128)\n                        if iszero(_25)\n                        {\n                            /// @src 5:266:1660  \"contract PythAdaptor is Ownable {...\"\n                            let pos_1 := mload(_2)\n                            returndatacopy(pos_1, _4, returndatasize())\n                            revert(pos_1, returndatasize())\n                        }\n                        /// @src 5:1320:1354  \"pythMain.getPriceUnsafe(tokenFeed)\"\n                        let expr_mpos := /** @src 5:266:1660  \"contract PythAdaptor is Ownable {...\" */ _4\n                        /// @src 5:1320:1354  \"pythMain.getPriceUnsafe(tokenFeed)\"\n                        if _25\n                        {\n                            let _26 := 128\n                            if gt(_26, returndatasize()) { _26 := returndatasize() }\n                            finalize_allocation(_23, _26)\n                            /// @src 5:266:1660  \"contract PythAdaptor is Ownable {...\"\n                            if slt(sub(/** @src 5:1320:1354  \"pythMain.getPriceUnsafe(tokenFeed)\" */ add(_23, _26), /** @src 5:266:1660  \"contract PythAdaptor is Ownable {...\" */ _23), /** @src 5:1320:1354  \"pythMain.getPriceUnsafe(tokenFeed)\" */ 128)\n                            /// @src 5:266:1660  \"contract PythAdaptor is Ownable {...\"\n                            { revert(_4, _4) }\n                            let memPtr_2 := mload(_2)\n                            let newFreePtr := add(memPtr_2, /** @src 5:1320:1354  \"pythMain.getPriceUnsafe(tokenFeed)\" */ 128)\n                            /// @src 5:266:1660  \"contract PythAdaptor is Ownable {...\"\n                            let _27 := 0xffffffffffffffff\n                            if or(gt(newFreePtr, _27), lt(newFreePtr, memPtr_2))\n                            {\n                                mstore(_4, shl(224, 0x4e487b71))\n                                mstore(_3, 0x41)\n                                revert(_4, _24)\n                            }\n                            mstore(_2, newFreePtr)\n                            let value_11 := mload(_23)\n                            if iszero(eq(value_11, signextend(7, value_11))) { revert(_4, _4) }\n                            mstore(memPtr_2, value_11)\n                            let value_12 := mload(add(_23, _15))\n                            if iszero(eq(value_12, and(value_12, _27))) { revert(_4, _4) }\n                            mstore(add(memPtr_2, _15), value_12)\n                            let value_13 := mload(add(_23, _2))\n                            if iszero(eq(value_13, signextend(3, value_13))) { revert(_4, _4) }\n                            mstore(add(memPtr_2, _2), value_13)\n                            mstore(add(memPtr_2, 96), mload(add(_23, 96)))\n                            /// @src 5:1320:1354  \"pythMain.getPriceUnsafe(tokenFeed)\"\n                            expr_mpos := memPtr_2\n                        }\n                        /// @src 5:1383:1398  \"tokenPrice.expo\"\n                        let _28 := add(expr_mpos, /** @src 5:266:1660  \"contract PythAdaptor is Ownable {...\" */ _2)\n                        let cleaned := signextend(3, mload(/** @src 5:1383:1398  \"tokenPrice.expo\" */ _28))\n                        /// @src 5:1383:1455  \"tokenPrice.expo > 0 ? uint32(tokenPrice.expo) : uint32(-tokenPrice.expo)\"\n                        let expr_1 := /** @src 5:266:1660  \"contract PythAdaptor is Ownable {...\" */ _4\n                        /// @src 5:1383:1455  \"tokenPrice.expo > 0 ? uint32(tokenPrice.expo) : uint32(-tokenPrice.expo)\"\n                        switch /** @src 5:1383:1402  \"tokenPrice.expo > 0\" */ sgt(/** @src 5:266:1660  \"contract PythAdaptor is Ownable {...\" */ cleaned, _4)\n                        case /** @src 5:1383:1455  \"tokenPrice.expo > 0 ? uint32(tokenPrice.expo) : uint32(-tokenPrice.expo)\" */ 0 {\n                            /// @src 5:266:1660  \"contract PythAdaptor is Ownable {...\"\n                            if eq(cleaned, not(0x7fffffff))\n                            {\n                                mstore(_4, shl(224, 0x4e487b71))\n                                mstore(_3, 0x11)\n                                revert(_4, _24)\n                            }\n                            /// @src 5:1383:1455  \"tokenPrice.expo > 0 ? uint32(tokenPrice.expo) : uint32(-tokenPrice.expo)\"\n                            expr_1 := /** @src 5:266:1660  \"contract PythAdaptor is Ownable {...\" */ and(0xffffffff, sub(_4, cleaned))\n                        }\n                        default /// @src 5:1383:1455  \"tokenPrice.expo > 0 ? uint32(tokenPrice.expo) : uint32(-tokenPrice.expo)\"\n                        {\n                            expr_1 := /** @src 5:266:1660  \"contract PythAdaptor is Ownable {...\" */ and(0xffffffff, mload(/** @src 5:1412:1427  \"tokenPrice.expo\" */ _28))\n                        }\n                        /// @src 5:266:1660  \"contract PythAdaptor is Ownable {...\"\n                        let _29 := mload(/** @src 5:1481:1497  \"tokenPrice.price\" */ expr_mpos)\n                        /// @src 5:1481:1532  \"tokenPrice.price > 0 ? uint64(tokenPrice.price) : 0\"\n                        let expr_2 := /** @src 5:266:1660  \"contract PythAdaptor is Ownable {...\" */ _4\n                        /// @src 5:1481:1532  \"tokenPrice.price > 0 ? uint64(tokenPrice.price) : 0\"\n                        switch /** @src 5:1481:1501  \"tokenPrice.price > 0\" */ sgt(/** @src 5:266:1660  \"contract PythAdaptor is Ownable {...\" */ signextend(7, _29), _4)\n                        case /** @src 5:1481:1532  \"tokenPrice.price > 0 ? uint64(tokenPrice.price) : 0\" */ 0 {\n                            expr_2 := /** @src 5:266:1660  \"contract PythAdaptor is Ownable {...\" */ _4\n                        }\n                        default /// @src 5:1481:1532  \"tokenPrice.price > 0 ? uint64(tokenPrice.price) : 0\"\n                        {\n                            expr_2 := /** @src 5:266:1660  \"contract PythAdaptor is Ownable {...\" */ and(0xffffffffffffffff, _29)\n                        }\n                        /// @src 5:1549:1561  \"uint(tPrice)\"\n                        let expr_3 := /** @src 5:266:1660  \"contract PythAdaptor is Ownable {...\" */ and(/** @src 5:1549:1561  \"uint(tPrice)\" */ expr_2, /** @src 5:266:1660  \"contract PythAdaptor is Ownable {...\" */ 0xffffffffffffffff)\n                        /// @src 5:1564:1568  \"1e36\"\n                        let _30 := 0xc097ce7bc90715b34b9f1000000000\n                        /// @src 5:266:1660  \"contract PythAdaptor is Ownable {...\"\n                        let product := mul(expr_3, /** @src 5:1564:1568  \"1e36\" */ _30)\n                        /// @src 5:266:1660  \"contract PythAdaptor is Ownable {...\"\n                        if iszero(or(iszero(expr_3), eq(/** @src 5:1564:1568  \"1e36\" */ _30, /** @src 5:266:1660  \"contract PythAdaptor is Ownable {...\" */ div(product, expr_3))))\n                        {\n                            mstore(_4, shl(224, 0x4e487b71))\n                            mstore(_3, 0x11)\n                            revert(_4, _24)\n                        }\n                        let exponent := and(expr_1, 0xffffffff)\n                        if gt(exponent, 77)\n                        {\n                            mstore(_4, shl(224, 0x4e487b71))\n                            mstore(_3, 0x11)\n                            revert(_4, _24)\n                        }\n                        /// @src 5:1549:1592  \"uint(tPrice) * 1e36 / uint(10 ** priceExpo)\"\n                        let expr_4 := checked_div_uint256(product, /** @src 5:266:1660  \"contract PythAdaptor is Ownable {...\" */ exp(10, exponent))\n                        /// @src 5:1607:1649  \"EIP20Interface(underlyingToken).decimals()\"\n                        let _31 := /** @src 5:266:1660  \"contract PythAdaptor is Ownable {...\" */ mload(_2)\n                        /// @src 5:1607:1649  \"EIP20Interface(underlyingToken).decimals()\"\n                        mstore(_31, /** @src 5:266:1660  \"contract PythAdaptor is Ownable {...\" */ shl(224, 0x313ce567))\n                        /// @src 5:1607:1649  \"EIP20Interface(underlyingToken).decimals()\"\n                        let _32 := staticcall(gas(), _21, _31, /** @src 5:266:1660  \"contract PythAdaptor is Ownable {...\" */ _3, /** @src 5:1607:1649  \"EIP20Interface(underlyingToken).decimals()\" */ _31, /** @src 5:266:1660  \"contract PythAdaptor is Ownable {...\" */ _15)\n                        /// @src 5:1607:1649  \"EIP20Interface(underlyingToken).decimals()\"\n                        if iszero(_32)\n                        {\n                            /// @src 5:266:1660  \"contract PythAdaptor is Ownable {...\"\n                            let pos_2 := mload(_2)\n                            returndatacopy(pos_2, _4, returndatasize())\n                            revert(pos_2, returndatasize())\n                        }\n                        /// @src 5:1607:1649  \"EIP20Interface(underlyingToken).decimals()\"\n                        let expr_5 := /** @src 5:266:1660  \"contract PythAdaptor is Ownable {...\" */ _4\n                        /// @src 5:1607:1649  \"EIP20Interface(underlyingToken).decimals()\"\n                        if _32\n                        {\n                            let _33 := /** @src 5:266:1660  \"contract PythAdaptor is Ownable {...\" */ _15\n                            /// @src 5:1607:1649  \"EIP20Interface(underlyingToken).decimals()\"\n                            if gt(/** @src 5:266:1660  \"contract PythAdaptor is Ownable {...\" */ _15, /** @src 5:1607:1649  \"EIP20Interface(underlyingToken).decimals()\" */ returndatasize()) { _33 := returndatasize() }\n                            finalize_allocation(_31, _33)\n                            /// @src 5:266:1660  \"contract PythAdaptor is Ownable {...\"\n                            if slt(sub(/** @src 5:1607:1649  \"EIP20Interface(underlyingToken).decimals()\" */ add(_31, _33), /** @src 5:266:1660  \"contract PythAdaptor is Ownable {...\" */ _31), _15) { revert(_4, _4) }\n                            let value_14 := mload(_31)\n                            if iszero(eq(value_14, and(value_14, 0xff))) { revert(_4, _4) }\n                            /// @src 5:1607:1649  \"EIP20Interface(underlyingToken).decimals()\"\n                            expr_5 := value_14\n                        }\n                        /// @src 5:266:1660  \"contract PythAdaptor is Ownable {...\"\n                        let _34 := and(/** @src 5:1602:1650  \"uint(EIP20Interface(underlyingToken).decimals())\" */ expr_5, /** @src 5:266:1660  \"contract PythAdaptor is Ownable {...\" */ 0xff)\n                        if gt(_34, 77)\n                        {\n                            mstore(_4, shl(224, 0x4e487b71))\n                            mstore(_3, 0x11)\n                            revert(_4, _24)\n                        }\n                        /// @src 5:1542:1651  \"return uint(tPrice) * 1e36 / uint(10 ** priceExpo) / 10 ** (uint(EIP20Interface(underlyingToken).decimals()))\"\n                        let var := /** @src 5:1549:1651  \"uint(tPrice) * 1e36 / uint(10 ** priceExpo) / 10 ** (uint(EIP20Interface(underlyingToken).decimals()))\" */ checked_div_uint256(expr_4, /** @src 5:266:1660  \"contract PythAdaptor is Ownable {...\" */ exp(10, _34))\n                        let memPos_2 := mload(_2)\n                        mstore(memPos_2, var)\n                        return(memPos_2, _15)\n                    }\n                }\n                revert(0, 0)\n            }\n            function abi_decode_array_address_dyn_calldata(offset, end) -> arrayPos, length\n            {\n                if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n                length := calldataload(offset)\n                if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n                arrayPos := add(offset, 0x20)\n                if gt(add(add(offset, shl(5, length)), 0x20), end) { revert(0, 0) }\n            }\n            function require_helper_stringliteral(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := mload(64)\n                    mstore(memPtr, shl(229, 4594637))\n                    mstore(add(memPtr, 4), 32)\n                    mstore(add(memPtr, 36), 32)\n                    mstore(add(memPtr, 68), \"Ownable: caller is not the owner\")\n                    revert(memPtr, 100)\n                }\n            }\n            function calldata_array_index_access_bytes32_dyn_calldata(base_ref, length, index) -> addr\n            {\n                if iszero(lt(index, length))\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x32)\n                    revert(0, 0x24)\n                }\n                addr := add(base_ref, shl(5, index))\n            }\n            function finalize_allocation(memPtr, size)\n            {\n                let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x41)\n                    revert(0, 0x24)\n                }\n                mstore(64, newFreePtr)\n            }\n            function checked_div_uint256(x, y) -> r\n            {\n                if iszero(y)\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x12)\n                    revert(0, 0x24)\n                }\n                r := div(x, y)\n            }\n        }\n        data \".metadata\" hex\"a2646970667358221220b89fe864bbf86c315c9d20ce8e99ee91d17e5f5cc0e0bf8557ccab7ee4dfd0c164736f6c63430008120033\"\n    }\n}\n","hash":"01000133b2034bf91d7e2cebd5b33d86a1b8b64a7081844f17b2813eeef82edf","factoryDependencies":{}},"cTokenInterface":{"abi":[{"inputs":[],"name":"underlying","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/oracle/PythAdaptor.sol\":\"cTokenInterface\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@pythnetwork/pyth-sdk-solidity/IPyth.sol\":{\"keccak256\":\"0x949c65c65fea0578c09a6fc068e09ed1165adede2c835984cefcb25d76de1de2\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://4d7cb071e08e81bb8b113a928f4c2d2b3cdf950ad64c6c7003ea3d874163ca77\",\"dweb:/ipfs/QmRbQchPxRTBMHi7WzLb8XnMGzPDQcWhu7i2u5naUsCRoZ\"]},\"@pythnetwork/pyth-sdk-solidity/IPythEvents.sol\":{\"keccak256\":\"0x048a35526c2e77d107d43ba336f1dcf31f64cef25ba429ae1f7a0fbc11c23320\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://b75be4c3643b22305995aba71fc92146dbf51fa82d2f9728c515d7749b32dca3\",\"dweb:/ipfs/QmRby4XA9jJQGhxoJ16BTUDuU7BzLFfadbfTgBiQsDgNyZ\"]},\"@pythnetwork/pyth-sdk-solidity/PythStructs.sol\":{\"keccak256\":\"0x95ff0a6d64517348ef604b8bcf246b561a9445d7e607b8f48491c617cfda9b65\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://fb7f4ffe03be7379d3833c5946e38153de26aef4a4da0323a1ec603787de9eb7\",\"dweb:/ipfs/QmW4WkkLPGjDJrLrW4mYfxtFh8e9KAcPhrnNdxPQsfkS6t\"]},\"contracts/Ownable.sol\":{\"keccak256\":\"0xc82402a70f97b7710330f5ea7c46217e33912c4127752a1145f3814631e3de49\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://320803d791e444e6d2f1868c1dd06b7c79c84c5e770675a14a1b379cee6000ea\",\"dweb:/ipfs/QmXFXsNmDt9EusQEfcx4XwNGz6emtkHy7KQKKqGPMmjgNo\"]},\"contracts/compound/EIP20Interface.sol\":{\"keccak256\":\"0xebdb703a3ab9bd68f3ee5cbe54394006b89a6369421976ad0e84b09a8b93cf75\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d762e6eca915cdf86177a63b27faf80ef32c65d61e69a64526572e74bc890158\",\"dweb:/ipfs/QmS4VJ7uZuyXCdv4qYaFFUbxo8C2RKmVtD4QvHnnDFetmK\"]},\"contracts/oracle/PythAdaptor.sol\":{\"keccak256\":\"0x842aed74e7c94085712bc7ac28a56f84e1b0e048f6f286cdecce78d466ee870f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://896c8ba3d6b611f37aa6cb048e85251493614fd0f5c72f202a2da105570516e8\",\"dweb:/ipfs/QmbRmAJo3Bxq1mps5EBtWqxbDS2PP3uYYoUfQJcWHWSK45\"]}},\"version\":1}","evm":{"legacyAssembly":null,"assembly":null,"bytecode":null,"methodIdentifiers":{"underlying()":"6f307dc3"}},"irOptimized":""}}}}}